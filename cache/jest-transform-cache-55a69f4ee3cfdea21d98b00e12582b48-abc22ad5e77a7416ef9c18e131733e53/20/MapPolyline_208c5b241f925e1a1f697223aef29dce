18a081192b3d9381d3ab3e9fb0fb5d11
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapPolyline = void 0;
var React = __importStar(require("react"));
var decorateMapComponent_1 = __importStar(require("./decorateMapComponent"));
var MapPolyline = function (_React$Component) {
  (0, _inherits2.default)(MapPolyline, _React$Component);
  var _super = _createSuper(MapPolyline);
  function MapPolyline(props) {
    var _this;
    (0, _classCallCheck2.default)(this, MapPolyline);
    _this = _super.call(this, props);
    _this.polyline = React.createRef();
    return _this;
  }
  (0, _createClass2.default)(MapPolyline, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var _this$polyline$curren;
      (_this$polyline$curren = this.polyline.current) == null ? void 0 : _this$polyline$curren.setNativeProps(props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        _this$props$strokeCol = _this$props.strokeColor,
        strokeColor = _this$props$strokeCol === void 0 ? '#000' : _this$props$strokeCol,
        _this$props$strokeWid = _this$props.strokeWidth,
        strokeWidth = _this$props$strokeWid === void 0 ? 1 : _this$props$strokeWid,
        _this$props$lineJoin = _this$props.lineJoin,
        lineJoin = _this$props$lineJoin === void 0 ? 'round' : _this$props$lineJoin,
        _this$props$lineCap = _this$props.lineCap,
        lineCap = _this$props$lineCap === void 0 ? 'round' : _this$props$lineCap;
      var AIRMapPolyline = this.getNativeComponent();
      return (0, _jsxRuntime.jsx)(AIRMapPolyline, Object.assign({}, this.props, {
        strokeColor: strokeColor,
        strokeWidth: strokeWidth,
        lineJoin: lineJoin,
        lineCap: lineCap,
        ref: this.polyline
      }));
    }
  }]);
  return MapPolyline;
}(React.Component);
exports.MapPolyline = MapPolyline;
exports.default = (0, decorateMapComponent_1.default)(MapPolyline, 'Polyline', {
  google: {
    ios: decorateMapComponent_1.SUPPORTED,
    android: decorateMapComponent_1.USES_DEFAULT_IMPLEMENTATION
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,