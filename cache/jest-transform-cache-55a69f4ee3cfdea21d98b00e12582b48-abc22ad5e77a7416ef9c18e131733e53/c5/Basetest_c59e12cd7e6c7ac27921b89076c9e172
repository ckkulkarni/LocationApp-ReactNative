3aaaa82b35bb076486b386f1a1452a12
_getJestObj().mock('react-redux', function () {
  return {
    useDispatch: jest.fn()
  };
});
_getJestObj().mock('react-native-geolocation-service', function () {
  return {
    getCurrentPosition: jest.fn(function (success, error, options) {
      var location = {
        coords: {
          latitude: 17.3920466,
          longitude: 78.4758037
        }
      };
      success(location);
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Base = _interopRequireDefault(require("../Base"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNativeGeolocationService = _interopRequireDefault(require("react-native-geolocation-service"));
var _reactRedux = require("react-redux");
require("@testing-library/jest-dom");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Locations List Screen/Base Component', function () {
  var mockDispatch = jest.fn();
  var useDispatchMock;
  beforeEach(function () {
    useDispatchMock = _reactRedux.useDispatch;
    useDispatchMock.mockReturnValue(mockDispatch);
  });
  it('renders the base component correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    var currentLabel = _reactNative.screen.getByTestId('list-current-label');
    expect(currentLabel).toHaveTextContent('unnamed road, Ward 78 Gunfoundry, Hyderabad - 500001, Telangana, India');
    console.log(currentLabel.props.children);
  });
  it('should have the right location', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    expect(_reactNativeGeolocationService.default.getCurrentPosition).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VEaXNwYXRjaCIsImplc3QiLCJmbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsInN1Y2Nlc3MiLCJlcnJvciIsIm9wdGlvbnMiLCJsb2NhdGlvbiIsImNvb3JkcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwidXNlTmF2aWdhdGlvbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfQmFzZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZUdlb2xvY2F0aW9uU2VydmljZSIsIl9yZWFjdFJlZHV4IiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwibW9ja0Rpc3BhdGNoIiwidXNlRGlzcGF0Y2hNb2NrIiwiYmVmb3JlRWFjaCIsIml0IiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsImN1cnJlbnRMYWJlbCIsInNjcmVlbiIsImdldEJ5VGVzdElkIiwiZXhwZWN0IiwidG9IYXZlVGV4dENvbnRlbnQiLCJjb25zb2xlIiwibG9nIiwicHJvcHMiLCJjaGlsZHJlbiIsIkdlb2xvY2F0aW9uIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIkJhc2UudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgZnJvbSAnLi4vQmFzZSc7XHJcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnQsIHNjcmVlbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgR2VvbG9jYXRpb24gZnJvbSAncmVhY3QtbmF0aXZlLWdlb2xvY2F0aW9uLXNlcnZpY2UnO1xyXG5pbXBvcnQge3VzZURpc3BhdGNofSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xyXG5qZXN0Lm1vY2soJ3JlYWN0LXJlZHV4JywgKCkgPT4gKHtcclxuICB1c2VEaXNwYXRjaDogamVzdC5mbigpLFxyXG59KSk7XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLWdlb2xvY2F0aW9uLXNlcnZpY2UnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGdldEN1cnJlbnRQb3NpdGlvbjogamVzdC5mbigoc3VjY2VzcywgZXJyb3IsIG9wdGlvbnMpID0+IHtcclxuICAgICAgY29uc3QgbG9jYXRpb24gPSB7XHJcbiAgICAgICAgY29vcmRzOiB7XHJcbiAgICAgICAgICBsYXRpdHVkZTogMTcuMzkyMDQ2NixcclxuICAgICAgICAgIGxvbmdpdHVkZTogNzguNDc1ODAzNyxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgICBzdWNjZXNzKGxvY2F0aW9uKTtcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdMb2NhdGlvbnMgTGlzdCBTY3JlZW4vQmFzZSBDb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgY29uc3QgbW9ja0Rpc3BhdGNoID0gamVzdC5mbigpO1xyXG4gIGxldCB1c2VEaXNwYXRjaE1vY2s6IGplc3QuTW9jaztcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIHVzZURpc3BhdGNoTW9jayA9IHVzZURpc3BhdGNoIGFzIGplc3QuTW9jaztcclxuICAgIHVzZURpc3BhdGNoTW9jay5tb2NrUmV0dXJuVmFsdWUobW9ja0Rpc3BhdGNoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgdGhlIGJhc2UgY29tcG9uZW50IGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIHJlbmRlcig8QmFzZSAvPik7XHJcbiAgICBjb25zdCBjdXJyZW50TGFiZWwgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xpc3QtY3VycmVudC1sYWJlbCcpO1xyXG4gICAgZXhwZWN0KGN1cnJlbnRMYWJlbCkudG9IYXZlVGV4dENvbnRlbnQoXHJcbiAgICAgICd1bm5hbWVkIHJvYWQsIFdhcmQgNzggR3VuZm91bmRyeSwgSHlkZXJhYmFkIC0gNTAwMDAxLCBUZWxhbmdhbmEsIEluZGlhJyxcclxuICAgICk7XHJcbiAgICBjb25zb2xlLmxvZyhjdXJyZW50TGFiZWwucHJvcHMuY2hpbGRyZW4pO1xyXG4gIH0pO1xyXG4gIGl0KCdzaG91bGQgaGF2ZSB0aGUgcmlnaHQgbG9jYXRpb24nLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoPEJhc2UgLz4pO1xyXG4gICAgZXhwZWN0KEdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbikudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFRQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsYUFBYSxFQUFFO0VBQUEsT0FBTztJQUM5QkMsV0FBVyxFQUFFQyxJQUFJLENBQUNDLEVBQUU7RUFDdEIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUNISixXQUFBLEdBQUtDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxZQUFNO0VBQ2xELE9BQU87SUFDTEksa0JBQWtCLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFVBQUNFLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUs7TUFDdkQsSUFBTUMsUUFBUSxHQUFHO1FBQ2ZDLE1BQU0sRUFBRTtVQUNOQyxRQUFRLEVBQUUsVUFBVTtVQUNwQkMsU0FBUyxFQUFFO1FBQ2I7TUFDRixDQUFDO01BQ0ROLE9BQU8sQ0FBQ0csUUFBUSxDQUFDO0lBQ25CLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQ0ZULFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMWSxhQUFhLEVBQUVWLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNVLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFWixJQUFJLENBQUNDLEVBQUU7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQyxJQUFBWSxzQkFBQSxHQUFBQyxPQUFBO0FBOUJILElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLDhCQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFHQUEsT0FBQTtBQUFtQyxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBakIsWUFBQTtFQUFBLElBQUF3QixRQUFBLEdBQUFQLE9BQUE7SUFBQWQsSUFBQSxHQUFBcUIsUUFBQSxDQUFBckIsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUF5Qm5Dc0IsUUFBUSxDQUFDLHNDQUFzQyxFQUFFLFlBQU07RUFDckQsSUFBTUMsWUFBWSxHQUFHdkIsSUFBSSxDQUFDQyxFQUFFLEVBQUU7RUFDOUIsSUFBSXVCLGVBQTBCO0VBQzlCQyxVQUFVLENBQUMsWUFBTTtJQUNmRCxlQUFlLEdBQUd6Qix1QkFBd0I7SUFDMUN5QixlQUFlLENBQUNiLGVBQWUsQ0FBQ1ksWUFBWSxDQUFDO0VBQy9DLENBQUMsQ0FBQztFQUVGRyxFQUFFLENBQUMsc0NBQXNDLEVBQUUsWUFBTTtJQUMvQyxJQUFBQyxtQkFBTSxFQUFDLElBQUFQLFdBQUEsQ0FBQVEsR0FBQSxFQUFDYixLQUFBLENBQUFjLE9BQUksS0FBRyxDQUFDO0lBQ2hCLElBQU1DLFlBQVksR0FBR0MsbUJBQU0sQ0FBQ0MsV0FBVyxDQUFDLG9CQUFvQixDQUFDO0lBQzdEQyxNQUFNLENBQUNILFlBQVksQ0FBQyxDQUFDSSxpQkFBaUIsQ0FDcEMsd0VBQXdFLENBQ3pFO0lBQ0RDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDTixZQUFZLENBQUNPLEtBQUssQ0FBQ0MsUUFBUSxDQUFDO0VBQzFDLENBQUMsQ0FBQztFQUNGWixFQUFFLENBQUMsZ0NBQWdDLEVBQUUsWUFBTTtJQUN6QyxJQUFBQyxtQkFBTSxFQUFDLElBQUFQLFdBQUEsQ0FBQVEsR0FBQSxFQUFDYixLQUFBLENBQUFjLE9BQUksS0FBRyxDQUFDO0lBQ2hCSSxNQUFNLENBQUNNLHNDQUFXLENBQUNyQyxrQkFBa0IsQ0FBQyxDQUFDc0MsZ0JBQWdCLEVBQUU7RUFDM0QsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=