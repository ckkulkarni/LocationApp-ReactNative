72f6b857b06647b856080139756feece
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapPolygon = void 0;
var React = __importStar(require("react"));
var decorateMapComponent_1 = __importStar(require("./decorateMapComponent"));
var MapPolygon = function (_React$Component) {
  (0, _inherits2.default)(MapPolygon, _React$Component);
  var _super = _createSuper(MapPolygon);
  function MapPolygon(props) {
    var _this;
    (0, _classCallCheck2.default)(this, MapPolygon);
    _this = _super.call(this, props);
    _this.polygon = React.createRef();
    return _this;
  }
  (0, _createClass2.default)(MapPolygon, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var _this$polygon$current;
      (_this$polygon$current = this.polygon.current) == null ? void 0 : _this$polygon$current.setNativeProps(props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        _this$props$strokeCol = _this$props.strokeColor,
        strokeColor = _this$props$strokeCol === void 0 ? '#000' : _this$props$strokeCol,
        _this$props$strokeWid = _this$props.strokeWidth,
        strokeWidth = _this$props$strokeWid === void 0 ? 1 : _this$props$strokeWid;
      var AIRMapPolygon = this.getNativeComponent();
      return (0, _jsxRuntime.jsx)(AIRMapPolygon, Object.assign({}, this.props, {
        strokeColor: strokeColor,
        strokeWidth: strokeWidth,
        ref: this.polygon
      }));
    }
  }]);
  return MapPolygon;
}(React.Component);
exports.MapPolygon = MapPolygon;
exports.default = (0, decorateMapComponent_1.default)(MapPolygon, 'Polygon', {
  google: {
    ios: decorateMapComponent_1.SUPPORTED,
    android: decorateMapComponent_1.USES_DEFAULT_IMPLEMENTATION
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfanN4UnVudGltZSIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwiaGFzT3duUHJvcGVydHkiLCJleHBvcnRzIiwiTWFwUG9seWdvbiIsIlJlYWN0IiwiZGVjb3JhdGVNYXBDb21wb25lbnRfMSIsIl9SZWFjdCRDb21wb25lbnQiLCJfc3VwZXIiLCJwcm9wcyIsIl90aGlzIiwicG9seWdvbiIsImNyZWF0ZVJlZiIsImtleSIsInNldE5hdGl2ZVByb3BzIiwiX3RoaXMkcG9seWdvbiRjdXJyZW50IiwiY3VycmVudCIsInJlbmRlciIsIl90aGlzJHByb3BzIiwiX3RoaXMkcHJvcHMkc3Ryb2tlQ29sIiwic3Ryb2tlQ29sb3IiLCJfdGhpcyRwcm9wcyRzdHJva2VXaWQiLCJzdHJva2VXaWR0aCIsIkFJUk1hcFBvbHlnb24iLCJnZXROYXRpdmVDb21wb25lbnQiLCJqc3giLCJhc3NpZ24iLCJyZWYiLCJDb21wb25lbnQiLCJnb29nbGUiLCJpb3MiLCJTVVBQT1JURUQiLCJhbmRyb2lkIiwiVVNFU19ERUZBVUxUX0lNUExFTUVOVEFUSU9OIl0sInNvdXJjZXMiOlsiTWFwUG9seWdvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYXBQb2x5Z29uID0gdm9pZCAwO1xuY29uc3QgUmVhY3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IGRlY29yYXRlTWFwQ29tcG9uZW50XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZGVjb3JhdGVNYXBDb21wb25lbnRcIikpO1xuY2xhc3MgTWFwUG9seWdvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgZ2V0TmF0aXZlQ29tcG9uZW50O1xuICAgIGdldE1hcE1hbmFnZXJDb21tYW5kO1xuICAgIGdldFVJTWFuYWdlckNvbW1hbmQ7XG4gICAgcG9seWdvbjtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMucG9seWdvbiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgIH1cbiAgICBzZXROYXRpdmVQcm9wcyhwcm9wcykge1xuICAgICAgICB0aGlzLnBvbHlnb24uY3VycmVudD8uc2V0TmF0aXZlUHJvcHMocHJvcHMpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgc3Ryb2tlQ29sb3IgPSAnIzAwMCcsIHN0cm9rZVdpZHRoID0gMSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgQUlSTWFwUG9seWdvbiA9IHRoaXMuZ2V0TmF0aXZlQ29tcG9uZW50KCk7XG4gICAgICAgIHJldHVybiAoPEFJUk1hcFBvbHlnb24gey4uLnRoaXMucHJvcHN9IHN0cm9rZUNvbG9yPXtzdHJva2VDb2xvcn0gc3Ryb2tlV2lkdGg9e3N0cm9rZVdpZHRofSByZWY9e3RoaXMucG9seWdvbn0vPik7XG4gICAgfVxufVxuZXhwb3J0cy5NYXBQb2x5Z29uID0gTWFwUG9seWdvbjtcbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBkZWNvcmF0ZU1hcENvbXBvbmVudF8xLmRlZmF1bHQpKE1hcFBvbHlnb24sICdQb2x5Z29uJywge1xuICAgIGdvb2dsZToge1xuICAgICAgICBpb3M6IGRlY29yYXRlTWFwQ29tcG9uZW50XzEuU1VQUE9SVEVELFxuICAgICAgICBhbmRyb2lkOiBkZWNvcmF0ZU1hcENvbXBvbmVudF8xLlVTRVNfREVGQVVMVF9JTVBMRU1FTlRBVElPTixcbiAgICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRyxVQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSSwyQkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUssZ0JBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUFBLFNBQUFPLGFBQUFDLE9BQUEs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