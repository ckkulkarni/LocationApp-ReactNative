{"version":3,"names":["_getJestObj","mock","useDispatch","jest","fn","getCurrentPosition","success","error","options","location","coords","latitude","longitude","useNavigation","mockReturnValue","navigate","_interopRequireDefault","require","_Base","_reactNative","_react","_reactNativeGeolocationService","_reactRedux","_jsxRuntime","_require","describe","mockDispatch","useDispatchMock","beforeEach","it","render","jsx","default","currentLabel","screen","getByTestId","console","log","props","expect","children","toHaveTextContent","Geolocation","toHaveBeenCalled"],"sources":["Base.test.tsx"],"sourcesContent":["import Base from '../Base';\r\nimport {render, fireEvent, screen} from '@testing-library/react-native';\r\nimport React from 'react';\r\nimport Geolocation from 'react-native-geolocation-service';\r\nimport {useDispatch} from 'react-redux';\r\nimport {NativeStackNavigationProp} from '@react-navigation/native-stack';\r\nimport {useNavigation} from '@react-navigation/native';\r\nimport '@testing-library/jest-dom';\r\njest.mock('react-redux', () => ({\r\n  useDispatch: jest.fn(),\r\n}));\r\njest.mock('react-native-geolocation-service', () => {\r\n  return {\r\n    getCurrentPosition: jest.fn((success, error, options) => {\r\n      const location = {\r\n        coords: {\r\n          latitude: 17.3920466,\r\n          longitude: 78.4758037,\r\n        },\r\n      };\r\n      success(location);\r\n    }),\r\n  };\r\n});\r\njest.mock('@react-navigation/native', () => {\r\n  return {\r\n    useNavigation: jest.fn().mockReturnValue({\r\n      navigate: jest.fn(),\r\n    }),\r\n  };\r\n});\r\n\r\ndescribe('Locations List Screen/Base Component', () => {\r\n  const mockDispatch = jest.fn();\r\n  let useDispatchMock: jest.Mock;\r\n  beforeEach(() => {\r\n    useDispatchMock = useDispatch as jest.Mock;\r\n    useDispatchMock.mockReturnValue(mockDispatch);\r\n  });\r\n\r\n  it('renders the base component correctly', () => {\r\n    render(<Base />);\r\n    const currentLabel = screen.getByTestId('list-current-label');\r\n    console.log(currentLabel.props);\r\n    expect(currentLabel.props.children).toHaveTextContent('Current Location');\r\n  });\r\n  it('should have the right location', () => {\r\n    render(<Base />);\r\n    expect(Geolocation.getCurrentPosition).toHaveBeenCalled();\r\n  });\r\n});\r\n"],"mappings":"AAQAA,WAAA,GAAKC,IAAI,CAAC,aAAa,EAAE;EAAA,OAAO;IAC9BC,WAAW,EAAEC,IAAI,CAACC,EAAE;EACtB,CAAC;AAAA,CAAC,CAAC;AACHJ,WAAA,GAAKC,IAAI,CAAC,kCAAkC,EAAE,YAAM;EAClD,OAAO;IACLI,kBAAkB,EAAEF,IAAI,CAACC,EAAE,CAAC,UAACE,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAK;MACvD,IAAMC,QAAQ,GAAG;QACfC,MAAM,EAAE;UACNC,QAAQ,EAAE,UAAU;UACpBC,SAAS,EAAE;QACb;MACF,CAAC;MACDN,OAAO,CAACG,QAAQ,CAAC;IACnB,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AACFT,WAAA,GAAKC,IAAI,CAAC,0BAA0B,EAAE,YAAM;EAC1C,OAAO;IACLY,aAAa,EAAEV,IAAI,CAACC,EAAE,EAAE,CAACU,eAAe,CAAC;MACvCC,QAAQ,EAAEZ,IAAI,CAACC,EAAE;IACnB,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAAC,IAAAY,sBAAA,GAAAC,OAAA;AA9BH,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,8BAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AAGAA,OAAA;AAAmC,IAAAM,WAAA,GAAAN,OAAA;AAAA,SAAAjB,YAAA;EAAA,IAAAwB,QAAA,GAAAP,OAAA;IAAAd,IAAA,GAAAqB,QAAA,CAAArB,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAyBnCsB,QAAQ,CAAC,sCAAsC,EAAE,YAAM;EACrD,IAAMC,YAAY,GAAGvB,IAAI,CAACC,EAAE,EAAE;EAC9B,IAAIuB,eAA0B;EAC9BC,UAAU,CAAC,YAAM;IACfD,eAAe,GAAGzB,uBAAwB;IAC1CyB,eAAe,CAACb,eAAe,CAACY,YAAY,CAAC;EAC/C,CAAC,CAAC;EAEFG,EAAE,CAAC,sCAAsC,EAAE,YAAM;IAC/C,IAAAC,mBAAM,EAAC,IAAAP,WAAA,CAAAQ,GAAA,EAACb,KAAA,CAAAc,OAAI,KAAG,CAAC;IAChB,IAAMC,YAAY,GAAGC,mBAAM,CAACC,WAAW,CAAC,oBAAoB,CAAC;IAC7DC,OAAO,CAACC,GAAG,CAACJ,YAAY,CAACK,KAAK,CAAC;IAC/BC,MAAM,CAACN,YAAY,CAACK,KAAK,CAACE,QAAQ,CAAC,CAACC,iBAAiB,CAAC,kBAAkB,CAAC;EAC3E,CAAC,CAAC;EACFZ,EAAE,CAAC,gCAAgC,EAAE,YAAM;IACzC,IAAAC,mBAAM,EAAC,IAAAP,WAAA,CAAAQ,GAAA,EAACb,KAAA,CAAAc,OAAI,KAAG,CAAC;IAChBO,MAAM,CAACG,sCAAW,CAACrC,kBAAkB,CAAC,CAACsC,gBAAgB,EAAE;EAC3D,CAAC,CAAC;AACJ,CAAC,CAAC"}