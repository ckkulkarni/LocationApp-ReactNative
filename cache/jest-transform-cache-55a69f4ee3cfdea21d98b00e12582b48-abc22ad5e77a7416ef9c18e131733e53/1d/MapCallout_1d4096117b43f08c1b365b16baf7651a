e51f9625c779ef51ca44227e792f31fa
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapCallout = void 0;
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var decorateMapComponent_1 = __importStar(require("./decorateMapComponent"));
var MapCallout = function (_React$Component) {
  (0, _inherits2.default)(MapCallout, _React$Component);
  var _super = _createSuper(MapCallout);
  function MapCallout() {
    (0, _classCallCheck2.default)(this, MapCallout);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(MapCallout, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        _this$props$tooltip = _this$props.tooltip,
        tooltip = _this$props$tooltip === void 0 ? false : _this$props$tooltip,
        _this$props$alphaHitT = _this$props.alphaHitTest,
        alphaHitTest = _this$props$alphaHitT === void 0 ? false : _this$props$alphaHitT;
      var AIRMapCallout = this.getNativeComponent();
      return (0, _jsxRuntime.jsx)(AIRMapCallout, Object.assign({}, this.props, {
        tooltip: tooltip,
        alphaHitTest: alphaHitTest,
        style: [styles.callout, this.props.style]
      }));
    }
  }]);
  return MapCallout;
}(React.Component);
exports.MapCallout = MapCallout;
var styles = react_native_1.StyleSheet.create({
  callout: {
    position: 'absolute'
  }
});
exports.default = (0, decorateMapComponent_1.default)(MapCallout, 'Callout', {
  google: {
    ios: decorateMapComponent_1.SUPPORTED,
    android: decorateMapComponent_1.USES_DEFAULT_IMPLEMENTATION
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,