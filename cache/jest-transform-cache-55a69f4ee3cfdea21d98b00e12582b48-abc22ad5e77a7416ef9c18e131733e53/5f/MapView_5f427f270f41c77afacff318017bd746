bdf5cafae3dc023be46fa29d44c2bd4b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableLatestRenderer = exports.AnimatedMapView = exports.MAP_TYPES = void 0;
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var decorateMapComponent_1 = require("./decorateMapComponent");
var ProviderConstants = __importStar(require("./ProviderConstants"));
var MapViewNativeComponent_1 = require("./MapViewNativeComponent");
exports.MAP_TYPES = {
  STANDARD: 'standard',
  SATELLITE: 'satellite',
  HYBRID: 'hybrid',
  TERRAIN: 'terrain',
  NONE: 'none',
  MUTEDSTANDARD: 'mutedStandard'
};
var GOOGLE_MAPS_ONLY_TYPES = [exports.MAP_TYPES.TERRAIN, exports.MAP_TYPES.NONE];
var MapView = function (_React$Component) {
  (0, _inherits2.default)(MapView, _React$Component);
  var _super = _createSuper(MapView);
  function MapView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, MapView);
    _this = _super.call(this, props);
    _this.map = React.createRef();
    _this.state = {
      isReady: react_native_1.Platform.OS === 'ios'
    };
    _this._onMapReady = _this._onMapReady.bind((0, _assertThisInitialized2.default)(_this));
    _this._onChange = _this._onChange.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  (0, _createClass2.default)(MapView, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var _this$map$current;
      console.warn('setNativeProps is deprecated and will be removed in next major release');
      (_this$map$current = this.map.current) == null ? void 0 : _this$map$current.setNativeProps(props);
    }
  }, {
    key: "_onMapReady",
    value: function _onMapReady() {
      var onMapReady = this.props.onMapReady;
      this.setState({
        isReady: true
      }, function () {
        if (onMapReady) {
          onMapReady();
        }
      });
    }
  }, {
    key: "_onChange",
    value: function _onChange(_ref) {
      var nativeEvent = _ref.nativeEvent;
      var isGesture = nativeEvent.isGesture;
      var details = {
        isGesture: isGesture
      };
      if (nativeEvent.continuous) {
        if (this.props.onRegionChange) {
          this.props.onRegionChange(nativeEvent.region, details);
        }
      } else if (this.props.onRegionChangeComplete) {
        this.props.onRegionChangeComplete(nativeEvent.region, details);
      }
    }
  }, {
    key: "getCamera",
    value: function getCamera() {
      if (react_native_1.Platform.OS === 'android') {
        return react_native_1.NativeModules.AirMapModule.getCamera(this._getHandle());
      } else if (react_native_1.Platform.OS === 'ios') {
        return this._runCommand('getCamera', []);
      }
      return Promise.reject('getCamera not supported on this platform');
    }
  }, {
    key: "setCamera",
    value: function setCamera(camera) {
      if (this.map.current) {
        MapViewNativeComponent_1.Commands.setCamera(this.map.current, camera);
      }
    }
  }, {
    key: "animateCamera",
    value: function animateCamera(camera, opts) {
      if (this.map.current) {
        MapViewNativeComponent_1.Commands.animateCamera(this.map.current, camera, opts != null && opts.duration ? opts.duration : 500);
      }
    }
  }, {
    key: "animateToRegion",
    value: function animateToRegion(region) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
      if (this.map.current) {
        MapViewNativeComponent_1.Commands.animateToRegion(this.map.current, region, duration);
      }
    }
  }, {
    key: "fitToElements",
    value: function fitToElements() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (this.map.current) {
        var _options$edgePadding = options.edgePadding,
          edgePadding = _options$edgePadding === void 0 ? {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          } : _options$edgePadding,
          _options$animated = options.animated,
          animated = _options$animated === void 0 ? true : _options$animated;
        MapViewNativeComponent_1.Commands.fitToElements(this.map.current, edgePadding, animated);
      }
    }
  }, {
    key: "fitToSuppliedMarkers",
    value: function fitToSuppliedMarkers(markers) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this.map.current) {
        var _options$edgePadding2 = options.edgePadding,
          edgePadding = _options$edgePadding2 === void 0 ? {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          } : _options$edgePadding2,
          _options$animated2 = options.animated,
          animated = _options$animated2 === void 0 ? true : _options$animated2;
        MapViewNativeComponent_1.Commands.fitToSuppliedMarkers(this.map.current, markers, edgePadding, animated);
      }
    }
  }, {
    key: "fitToCoordinates",
    value: function fitToCoordinates() {
      var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this.map.current) {
        var _options$edgePadding3 = options.edgePadding,
          edgePadding = _options$edgePadding3 === void 0 ? {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          } : _options$edgePadding3,
          _options$animated3 = options.animated,
          animated = _options$animated3 === void 0 ? true : _options$animated3;
        MapViewNativeComponent_1.Commands.fitToCoordinates(this.map.current, coordinates, edgePadding, animated);
      }
    }
  }, {
    key: "getMapBoundaries",
    value: function () {
      var _getMapBoundaries = (0, _asyncToGenerator2.default)(function* () {
        if (react_native_1.Platform.OS === 'android') {
          return yield react_native_1.NativeModules.AirMapModule.getMapBoundaries(this._getHandle());
        } else if (react_native_1.Platform.OS === 'ios') {
          return yield this._runCommand('getMapBoundaries', []);
        }
        return Promise.reject('getMapBoundaries not supported on this platform');
      });
      function getMapBoundaries() {
        return _getMapBoundaries.apply(this, arguments);
      }
      return getMapBoundaries;
    }()
  }, {
    key: "setMapBoundaries",
    value: function setMapBoundaries(northEast, southWest) {
      if (this.map.current) {
        MapViewNativeComponent_1.Commands.setMapBoundaries(this.map.current, northEast, southWest);
      }
    }
  }, {
    key: "setIndoorActiveLevelIndex",
    value: function setIndoorActiveLevelIndex(activeLevelIndex) {
      if (this.map.current) {
        MapViewNativeComponent_1.Commands.setIndoorActiveLevelIndex(this.map.current, activeLevelIndex);
      }
    }
  }, {
    key: "takeSnapshot",
    value: function takeSnapshot(args) {
      var _this2 = this;
      var config = {
        width: args.width || 0,
        height: args.height || 0,
        region: args.region || {},
        format: args.format || 'png',
        quality: args.quality || 1.0,
        result: args.result || 'file'
      };
      if (config.format !== 'png' && config.format !== 'jpg') {
        throw new Error('Invalid format specified');
      }
      if (config.result !== 'file' && config.result !== 'base64') {
        throw new Error('Invalid result specified');
      }
      if (react_native_1.Platform.OS === 'android') {
        return react_native_1.NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);
      } else if (react_native_1.Platform.OS === 'ios') {
        return new Promise(function (resolve, reject) {
          _this2._runCommand('takeSnapshot', [config.width, config.height, config.region, config.format, config.quality, config.result, function (err, snapshot) {
            if (err) {
              reject(err);
            } else {
              resolve(snapshot);
            }
          }]);
        });
      }
      return Promise.reject('takeSnapshot not supported on this platform');
    }
  }, {
    key: "addressForCoordinate",
    value: function addressForCoordinate(coordinate) {
      if (react_native_1.Platform.OS === 'android') {
        return react_native_1.NativeModules.AirMapModule.getAddressFromCoordinates(this._getHandle(), coordinate);
      } else if (react_native_1.Platform.OS === 'ios') {
        return this._runCommand('getAddressFromCoordinates', [coordinate]);
      }
      return Promise.reject('getAddress not supported on this platform');
    }
  }, {
    key: "pointForCoordinate",
    value: function pointForCoordinate(coordinate) {
      if (react_native_1.Platform.OS === 'android') {
        return react_native_1.NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);
      } else if (react_native_1.Platform.OS === 'ios') {
        return this._runCommand('pointForCoordinate', [coordinate]);
      }
      return Promise.reject('pointForCoordinate not supported on this platform');
    }
  }, {
    key: "coordinateForPoint",
    value: function coordinateForPoint(point) {
      if (react_native_1.Platform.OS === 'android') {
        return react_native_1.NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);
      } else if (react_native_1.Platform.OS === 'ios') {
        return this._runCommand('coordinateForPoint', [point]);
      }
      return Promise.reject('coordinateForPoint not supported on this platform');
    }
  }, {
    key: "getMarkersFrames",
    value: function getMarkersFrames() {
      var onlyVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (react_native_1.Platform.OS === 'ios') {
        return this._runCommand('getMarkersFrames', [onlyVisible]);
      }
      return Promise.reject('getMarkersFrames not supported on this platform');
    }
  }, {
    key: "boundingBoxForRegion",
    value: function boundingBoxForRegion(region) {
      return {
        northEast: {
          latitude: region.latitude + region.latitudeDelta / 2,
          longitude: region.longitude + region.longitudeDelta / 2
        },
        southWest: {
          latitude: region.latitude - region.latitudeDelta / 2,
          longitude: region.longitude - region.longitudeDelta / 2
        }
      };
    }
  }, {
    key: "_mapManagerCommand",
    value: function _mapManagerCommand(name) {
      return react_native_1.NativeModules[(0, decorateMapComponent_1.getNativeMapName)(this.props.provider) + "Manager"][name];
    }
  }, {
    key: "_getHandle",
    value: function _getHandle() {
      return (0, react_native_1.findNodeHandle)(this.map.current);
    }
  }, {
    key: "_runCommand",
    value: function _runCommand(name, args) {
      if (react_native_1.Platform.OS === 'ios') {
        return this._mapManagerCommand(name).apply(void 0, [this._getHandle()].concat((0, _toConsumableArray2.default)(args)));
      } else {
        return Promise.reject("Invalid platform was passed: " + react_native_1.Platform.OS);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var props;
      if (this.state.isReady) {
        props = Object.assign({
          region: null,
          initialRegion: null,
          onChange: this._onChange,
          onMapReady: this._onMapReady,
          ref: this.map,
          customMapStyleString: this.props.customMapStyle ? JSON.stringify(this.props.customMapStyle) : undefined
        }, this.props);
        if (react_native_1.Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT && props.mapType && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {
          props.mapType = exports.MAP_TYPES.STANDARD;
        }
        if (props.onPanDrag) {
          props.handlePanDrag = !!props.onPanDrag;
        }
      } else {
        props = {
          style: this.props.style,
          region: null,
          initialRegion: this.props.initialRegion || null,
          initialCamera: this.props.initialCamera,
          ref: this.map,
          onChange: this._onChange,
          onMapReady: this._onMapReady,
          onLayout: this.props.onLayout,
          customMapStyleString: this.props.customMapStyle ? JSON.stringify(this.props.customMapStyle) : undefined
        };
      }
      if (react_native_1.Platform.OS === 'android' && this.props.liteMode) {
        return (0, _jsxRuntime.jsx)(decorateMapComponent_1.ProviderContext.Provider, {
          value: this.props.provider,
          children: (0, _jsxRuntime.jsx)(AIRMapLite, Object.assign({}, props))
        });
      }
      var AIRMap = getNativeMapComponent(this.props.provider);
      return (0, _jsxRuntime.jsx)(decorateMapComponent_1.ProviderContext.Provider, {
        value: this.props.provider,
        children: (0, _jsxRuntime.jsx)(AIRMap, Object.assign({}, props))
      });
    }
  }]);
  return MapView;
}(React.Component);
var airMaps = {
  default: (0, react_native_1.requireNativeComponent)('AIRMap'),
  google: function google() {
    return null;
  }
};
if (react_native_1.Platform.OS === 'android') {
  airMaps.google = airMaps.default;
} else {
  airMaps.google = decorateMapComponent_1.googleMapIsInstalled ? (0, react_native_1.requireNativeComponent)('AIRGoogleMap') : (0, decorateMapComponent_1.createNotSupportedComponent)('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');
}
var getNativeMapComponent = function getNativeMapComponent(provider) {
  return airMaps[provider || 'default'];
};
var AIRMapLite = react_native_1.UIManager.getViewManagerConfig('AIRMapLite') ? (0, react_native_1.requireNativeComponent)('AIRMapLite') : function () {
  return null;
};
exports.AnimatedMapView = react_native_1.Animated.createAnimatedComponent(MapView);
var enableLatestRenderer = function enableLatestRenderer() {
  if (react_native_1.Platform.OS !== 'android') {
    return;
  }
  return react_native_1.NativeModules.AirMapModule.enableLatestRenderer();
};
exports.enableLatestRenderer = enableLatestRenderer;
MapView.Animated = exports.AnimatedMapView;
exports.default = MapView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,