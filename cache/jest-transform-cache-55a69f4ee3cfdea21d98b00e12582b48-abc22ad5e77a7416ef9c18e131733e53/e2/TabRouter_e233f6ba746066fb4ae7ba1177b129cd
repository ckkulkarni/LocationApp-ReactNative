884fd48b90f686ad2b96f4b94c04fdef
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabActions = void 0;
exports.default = TabRouter;
var _nonSecure = require("nanoid/non-secure");
var _BaseRouter = _interopRequireDefault(require("./BaseRouter"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var TYPE_ROUTE = 'route';
var TabActions = {
  jumpTo: function jumpTo(name, params) {
    return {
      type: 'JUMP_TO',
      payload: {
        name: name,
        params: params
      }
    };
  }
};
exports.TabActions = TabActions;
var getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {
  var history = [{
    type: TYPE_ROUTE,
    key: routes[index].key
  }];
  var initialRouteIndex;
  switch (backBehavior) {
    case 'order':
      for (var i = index; i > 0; i--) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[i - 1].key
        });
      }
      break;
    case 'firstRoute':
      if (index !== 0) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[0].key
        });
      }
      break;
    case 'initialRoute':
      initialRouteIndex = routes.findIndex(function (route) {
        return route.name === initialRouteName;
      });
      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;
      if (index !== initialRouteIndex) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[initialRouteIndex].key
        });
      }
      break;
    case 'history':
      break;
  }
  return history;
};
var changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {
  var history;
  if (backBehavior === 'history') {
    var currentKey = state.routes[index].key;
    history = state.history.filter(function (it) {
      return it.type === 'route' ? it.key !== currentKey : false;
    }).concat({
      type: TYPE_ROUTE,
      key: currentKey
    });
  } else {
    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);
  }
  return Object.assign({}, state, {
    index: index,
    history: history
  });
};
function TabRouter(_ref) {
  var initialRouteName = _ref.initialRouteName,
    _ref$backBehavior = _ref.backBehavior,
    backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;
  var router = Object.assign({}, _BaseRouter.default, {
    type: 'tab',
    getInitialState: function getInitialState(_ref2) {
      var routeNames = _ref2.routeNames,
        routeParamList = _ref2.routeParamList;
      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;
      var routes = routeNames.map(function (name) {
        return {
          name: name,
          key: name + "-" + (0, _nonSecure.nanoid)(),
          params: routeParamList[name]
        };
      });
      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      return {
        stale: false,
        type: 'tab',
        key: "tab-" + (0, _nonSecure.nanoid)(),
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref3) {
      var _ref6, _ref7;
      var _state$routes, _state$history;
      var routeNames = _ref3.routeNames,
        routeParamList = _ref3.routeParamList;
      var state = partialState;
      if (state.stale === false) {
        return state;
      }
      var routes = routeNames.map(function (name) {
        var route = state.routes.find(function (r) {
          return r.name === name;
        });
        return Object.assign({}, route, {
          name: name,
          key: route && route.name === name && route.key ? route.key : name + "-" + (0, _nonSecure.nanoid)(),
          params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined
        });
      });
      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_ref6 = state === null || state === void 0 ? void 0 : state.index) != null ? _ref6 : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);
      var history = (_ref7 = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {
        return routes.find(function (r) {
          return r.key === it.key;
        });
      })) != null ? _ref7 : [];
      return changeIndex({
        stale: false,
        type: 'tab',
        key: "tab-" + (0, _nonSecure.nanoid)(),
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes
      }, index, backBehavior, initialRouteName);
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {
      var routeNames = _ref4.routeNames,
        routeParamList = _ref4.routeParamList,
        routeKeyChanges = _ref4.routeKeyChanges;
      var routes = routeNames.map(function (name) {
        return state.routes.find(function (r) {
          return r.name === name && !routeKeyChanges.includes(r.name);
        }) || {
          name: name,
          key: name + "-" + (0, _nonSecure.nanoid)(),
          params: routeParamList[name]
        };
      });
      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));
      var history = state.history.filter(function (it) {
        return it.type !== 'route' || routes.find(function (r) {
          return r.key === it.key;
        });
      });
      if (!history.length) {
        history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      }
      return Object.assign({}, state, {
        history: history,
        routeNames: routeNames,
        routes: routes,
        index: index
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });
      if (index === -1 || index === state.index) {
        return state;
      }
      return changeIndex(state, index, backBehavior, initialRouteName);
    },
    getStateForAction: function getStateForAction(state, action, _ref5) {
      var routeParamList = _ref5.routeParamList;
      switch (action.type) {
        case 'JUMP_TO':
        case 'NAVIGATE':
          {
            var index = -1;
            if (action.type === 'NAVIGATE' && action.payload.key) {
              index = state.routes.findIndex(function (route) {
                return route.key === action.payload.key;
              });
            } else {
              index = state.routes.findIndex(function (route) {
                return route.name === action.payload.name;
              });
            }
            if (index === -1) {
              return null;
            }
            return changeIndex(Object.assign({}, state, {
              routes: state.routes.map(function (route, i) {
                if (i !== index) {
                  return route;
                }
                var params;
                if (action.type === 'NAVIGATE' && action.payload.merge) {
                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;
                } else {
                  params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;
                }
                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;
                return params !== route.params || path !== route.path ? Object.assign({}, route, {
                  path: path,
                  params: params
                }) : route;
              })
            }), index, backBehavior, initialRouteName);
          }
        case 'GO_BACK':
          {
            if (state.history.length === 1) {
              return null;
            }
            var previousKey = state.history[state.history.length - 2].key;
            var _index = state.routes.findIndex(function (route) {
              return route.key === previousKey;
            });
            if (_index === -1) {
              return null;
            }
            return Object.assign({}, state, {
              history: state.history.slice(0, -1),
              index: _index
            });
          }
        default:
          return _BaseRouter.default.getStateForAction(state, action);
      }
    },
    shouldActionChangeFocus: function shouldActionChangeFocus(action) {
      return action.type === 'NAVIGATE';
    },
    actionCreators: TabActions
  });
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9uU2VjdXJlIiwicmVxdWlyZSIsIl9CYXNlUm91dGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiVFlQRV9ST1VURSIsIlRhYkFjdGlvbnMiLCJqdW1wVG8iLCJuYW1lIiwicGFyYW1zIiwidHlwZSIsInBheWxvYWQiLCJleHBvcnRzIiwiZ2V0Um91dGVIaXN0b3J5Iiwicm91dGVzIiwiaW5kZXgiLCJiYWNrQmVoYXZpb3IiLCJpbml0aWFsUm91dGVOYW1lIiwiaGlzdG9yeSIsImtleSIsImluaXRpYWxSb3V0ZUluZGV4IiwiaSIsInVuc2hpZnQiLCJmaW5kSW5kZXgiLCJyb3V0ZSIsImNoYW5nZUluZGV4Iiwic3RhdGUiLCJjdXJyZW50S2V5IiwiZmlsdGVyIiwiaXQiLCJjb25jYXQiLCJPYmplY3QiLCJhc3NpZ24iLCJUYWJSb3V0ZXIiLCJfcmVmIiwiX3JlZiRiYWNrQmVoYXZpb3IiLCJyb3V0ZXIiLCJnZXRJbml0aWFsU3RhdGUiLCJfcmVmMiIsInJvdXRlTmFtZXMiLCJyb3V0ZVBhcmFtTGlzdCIsInVuZGVmaW5lZCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsIm1hcCIsIm5hbm9pZCIsInN0YWxlIiwiZ2V0UmVoeWRyYXRlZFN0YXRlIiwicGFydGlhbFN0YXRlIiwiX3JlZjMiLCJfcmVmNiIsIl9yZWY3IiwiX3N0YXRlJHJvdXRlcyIsIl9zdGF0ZSRoaXN0b3J5IiwiZmluZCIsInIiLCJNYXRoIiwibWluIiwibWF4IiwibGVuZ3RoIiwiZ2V0U3RhdGVGb3JSb3V0ZU5hbWVzQ2hhbmdlIiwiX3JlZjQiLCJyb3V0ZUtleUNoYW5nZXMiLCJnZXRTdGF0ZUZvclJvdXRlRm9jdXMiLCJnZXRTdGF0ZUZvckFjdGlvbiIsImFjdGlvbiIsIl9yZWY1IiwibWVyZ2UiLCJwYXRoIiwicHJldmlvdXNLZXkiLCJzbGljZSIsInNob3VsZEFjdGlvbkNoYW5nZUZvY3VzIiwiYWN0aW9uQ3JlYXRvcnMiXSwic291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