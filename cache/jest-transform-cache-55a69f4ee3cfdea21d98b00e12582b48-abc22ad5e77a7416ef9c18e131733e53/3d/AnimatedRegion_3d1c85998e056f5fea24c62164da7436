4bd514fd520fd49de11ba9a11caf3f61
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_native_1 = require("react-native");
var AnimatedWithChildren = Object.getPrototypeOf(react_native_1.Animated.ValueXY);
if (__DEV__) {
  if (AnimatedWithChildren.name !== 'AnimatedWithChildren') {
    console.error('AnimatedRegion could not obtain AnimatedWithChildren base class');
  }
}
var configTypes = ['latitude', 'longitude', 'latitudeDelta', 'longitudeDelta'];
var defaultValues = {
  latitude: 0,
  longitude: 0,
  latitudeDelta: 0,
  longitudeDelta: 0
};
var _uniqueId = 1;
var getAnimatedValue = function getAnimatedValue(valueIn, fallback) {
  if (valueIn instanceof react_native_1.Animated.Value) {
    return valueIn;
  } else if (typeof valueIn === 'number') {
    return new react_native_1.Animated.Value(valueIn);
  }
  return new react_native_1.Animated.Value(fallback);
};
var AnimatedMapRegion = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedMapRegion, _AnimatedWithChildren);
  var _super = _createSuper(AnimatedMapRegion);
  function AnimatedMapRegion() {
    var _this;
    var valueIn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, AnimatedMapRegion);
    _this = _super.call(this);
    _this.latitude = getAnimatedValue(valueIn.latitude, defaultValues.latitude);
    _this.longitude = getAnimatedValue(valueIn.longitude, defaultValues.longitude);
    _this.latitudeDelta = getAnimatedValue(valueIn.latitudeDelta, defaultValues.latitudeDelta);
    _this.longitudeDelta = getAnimatedValue(valueIn.longitudeDelta, defaultValues.longitudeDelta);
    _this._regionListeners = {};
    return _this;
  }
  (0, _createClass2.default)(AnimatedMapRegion, [{
    key: "setValue",
    value: function setValue(value) {
      this.latitude._value = value.latitude;
      this.longitude._value = value.longitude;
      this.latitudeDelta._value = value.latitudeDelta;
      this.longitudeDelta._value = value.longitudeDelta;
    }
  }, {
    key: "setOffset",
    value: function setOffset(offset) {
      this.latitude.setOffset(offset.latitude);
      this.longitude.setOffset(offset.longitude);
      this.latitudeDelta.setOffset(offset.latitudeDelta);
      this.longitudeDelta.setOffset(offset.longitudeDelta);
    }
  }, {
    key: "flattenOffset",
    value: function flattenOffset() {
      this.latitude.flattenOffset();
      this.longitude.flattenOffset();
      this.latitudeDelta.flattenOffset();
      this.longitudeDelta.flattenOffset();
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return {
        latitude: this.latitude.__getValue(),
        longitude: this.longitude.__getValue(),
        latitudeDelta: this.latitudeDelta.__getValue(),
        longitudeDelta: this.longitudeDelta.__getValue()
      };
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this.latitude.__addChild(this);
      this.longitude.__addChild(this);
      this.latitudeDelta.__addChild(this);
      this.longitudeDelta.__addChild(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this.latitude.__removeChild(this);
      this.longitude.__removeChild(this);
      this.latitudeDelta.__removeChild(this);
      this.longitudeDelta.__removeChild(this);
    }
  }, {
    key: "stopAnimation",
    value: function stopAnimation(callback) {
      this.latitude.stopAnimation();
      this.longitude.stopAnimation();
      this.latitudeDelta.stopAnimation();
      this.longitudeDelta.stopAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: "addListener",
    value: function addListener(callback) {
      var _this2 = this;
      var id = String(_uniqueId++);
      var jointCallback = function jointCallback() {
        return callback(_this2.__getValue());
      };
      this._regionListeners[id] = {
        latitude: this.latitude.addListener(jointCallback),
        longitude: this.longitude.addListener(jointCallback),
        latitudeDelta: this.latitudeDelta.addListener(jointCallback),
        longitudeDelta: this.longitudeDelta.addListener(jointCallback)
      };
      return id;
    }
  }, {
    key: "removeListener",
    value: function removeListener(id) {
      this.latitude.removeListener(this._regionListeners[id].latitude);
      this.longitude.removeListener(this._regionListeners[id].longitude);
      this.latitudeDelta.removeListener(this._regionListeners[id].latitudeDelta);
      this.longitudeDelta.removeListener(this._regionListeners[id].longitudeDelta);
      delete this._regionListeners[id];
    }
  }, {
    key: "spring",
    value: function spring(config) {
      var animations = [];
      for (var type of configTypes) {
        if (config.hasOwnProperty(type)) {
          animations.push(react_native_1.Animated.spring(this[type], Object.assign({}, config, {
            toValue: config[type],
            useNativeDriver: !!(config != null && config.useNativeDriver)
          })));
        }
      }
      return react_native_1.Animated.parallel(animations);
    }
  }, {
    key: "timing",
    value: function timing(config) {
      var animations = [];
      for (var type of configTypes) {
        if (config.hasOwnProperty(type)) {
          animations.push(react_native_1.Animated.timing(this[type], Object.assign({}, config, {
            toValue: config[type],
            useNativeDriver: !!(config != null && config.useNativeDriver)
          })));
        }
      }
      return react_native_1.Animated.parallel(animations);
    }
  }]);
  return AnimatedMapRegion;
}(AnimatedWithChildren);
exports.default = AnimatedMapRegion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,