8a78cbf42621e3274a9a3f7d49fe16c4
_getJestObj().mock('react-redux', function () {
  return {
    useDispatch: jest.fn()
  };
});
_getJestObj().mock('react-native-geolocation-service', function () {
  return {
    getCurrentPosition: jest.fn(function (success) {
      var location = {
        coords: {
          latitude: 17.3920466,
          longitude: 78.4758037
        }
      };
      success(location);
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Base = _interopRequireDefault(require("../Base"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactTestRenderer = require("react-test-renderer");
var _reactNativeGeolocationService = _interopRequireDefault(require("react-native-geolocation-service"));
var _reactRedux = require("react-redux");
var _native = require("@react-navigation/native");
require("@testing-library/jest-dom");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var timestamp = new Date(Date.now()).toLocaleString([], {
  year: 'numeric',
  month: 'numeric',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
var navigation = (0, _native.useNavigation)();
describe('Locations List Screen/Base Component', function () {
  var latitude;
  var longitude;
  var mockDispatch = jest.fn();
  var useDispatchMock;
  var fetchMock = jest.fn();
  global.fetch = fetchMock;
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    yield new Promise(function (resolve) {
      _reactNativeGeolocationService.default.getCurrentPosition(function (position) {
        latitude = position.coords.latitude;
        longitude = position.coords.longitude;
        resolve();
      });
    });
  }));
  var mockResponse = {
    results: [{
      formatted: '123 Main St, Anytown USA'
    }]
  };
  global.fetch = jest.fn().mockResolvedValue({
    json: function json() {
      return Promise.resolve(mockResponse);
    }
  });
  beforeEach(function () {
    fetchMock.mockReset();
    useDispatchMock = _reactRedux.useDispatch;
    useDispatchMock.mockReturnValue(mockDispatch);
  });
  it('renders the base component correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    var currentLabel = _reactNative.screen.getByTestId('list-current-label');
    expect(currentLabel.props.children).toBe('Current Location');
  });
  it('should have the right location', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    expect(_reactNativeGeolocationService.default.getCurrentPosition).toHaveBeenCalled();
  });
  it('renders the current location time', (0, _asyncToGenerator2.default)(function* () {
    var currentLocation = {
      address: 'unnamed road',
      time: timestamp,
      latitude: 42.123456,
      longitude: -71.123456
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render.getByTestId;
    var currentLocationTime = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-current-time');
    });
    expect(currentLocationTime.props.children).toBe(currentLocation.time);
  }));
  test('displays current location', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      results: [{
        formatted: '123 Main St, Anytown USA'
      }]
    };
    global.fetch = jest.fn().mockResolvedValue({
      json: function json() {
        return Promise.resolve(mockResponse);
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var currentLocationName = getByTestId('list-current-name');
      expect(currentLocationName.props.children).toBe('123 Main St, Anytown USA');
    });
  }));
  it('renders the whole location item correctly', (0, _asyncToGenerator2.default)(function* () {
    var currentLocation = {
      address: '123 Main St, Anytown USA',
      time: timestamp,
      latitude: latitude,
      longitude: longitude
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render3.getByTestId;
    var currentLocationItem = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-current-item');
    });
    _reactNative.fireEvent.press(currentLocationItem);
    expect(navigation.navigate).toHaveBeenCalledWith('Map', {
      address: currentLocation
    });
  }));
  it('clears all locations on button press', (0, _asyncToGenerator2.default)(function* () {
    var clearAllLocations = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactNative2.Button, {
        title: "Clear All Locations",
        onPress: clearAllLocations,
        testID: "list-clear-all-button"
      })),
      getByTestId = _render4.getByTestId;
    var clearAllButton = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-clear-all-button');
    });
    yield (0, _reactTestRenderer.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(clearAllButton);
    }));
    expect(clearAllLocations).toHaveBeenCalled();
  }));
  it('renders previous location address', function () {
    var mockPreviousLocations = [{
      address: '123 Main St',
      time: '1:00 PM'
    }, {
      address: '456 Oak Ave',
      time: '2:00 PM'
    }];
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    (0, _reactTestRenderer.act)(function () {
      setPreviousLocations(mockPreviousLocations);
    });
    var previousLocationAddress = _reactNative.screen.getByTestId('list-previous-name-0');
    expect(previousLocationAddress).toHaveTextContent('123 Main St');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,