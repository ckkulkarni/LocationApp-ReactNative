370f170ed53b946a1974e56faee57369
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _Map = _interopRequireDefault(require("../Map"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _reactNativeMaps = _interopRequireWildcard(require("react-native-maps"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
describe('Map component that renders a map view for selected location', function () {
  var routeParams = {
    params: {
      address: {
        latitude: 37.78825,
        longitude: -122.4324,
        latitudeDelta: 0.0922,
        longitudeDelta: 0.0421
      }
    }
  };
  var wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Map.default, {
    route: routeParams
  }));
  var mapView = wrapper.find(_reactNativeMaps.default);
  var marker = wrapper.find(_reactNativeMaps.Marker);
  it('renders map component for the selected map component', function () {
    expect(wrapper.find(_reactNativeMaps.default)).toHaveLength(1);
  });
  it('ensure that the right provider is given', function () {
    expect(mapView.prop('provider')).toEqual('google');
  });
  it('ensure that the region is correct', function () {
    expect(mapView.prop('region')).toEqual({
      latitude: routeParams.params.address.latitude,
      longitude: routeParams.params.address.longitude,
      latitudeDelta: routeParams.params.address.latitudeDelta,
      longitudeDelta: routeParams.params.address.longitudeDelta
    });
  });
  it('renders a map with correct marker', function () {
    expect(marker).toHaveLength(1);
  });
  it('make sure that the coordinates given to the Marker is correct', function () {
    expect(marker.prop('coordinate')).toEqual({
      latitude: routeParams.params.address.latitude,
      longitude: routeParams.params.address.longitude
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9NYXAiLCJfZW56eW1lQWRhcHRlclJlYWN0IiwiZW56eW1lIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3ROYXRpdmVNYXBzIiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiY29uZmlndXJlIiwiYWRhcHRlciIsIkFkYXB0ZXIiLCJkZXNjcmliZSIsInJvdXRlUGFyYW1zIiwicGFyYW1zIiwiYWRkcmVzcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwibGF0aXR1ZGVEZWx0YSIsImxvbmdpdHVkZURlbHRhIiwid3JhcHBlciIsInNoYWxsb3ciLCJqc3giLCJyb3V0ZSIsIm1hcFZpZXciLCJmaW5kIiwiTWFwVmlldyIsIm1hcmtlciIsIk1hcmtlciIsIml0IiwiZXhwZWN0IiwidG9IYXZlTGVuZ3RoIiwicHJvcCIsInRvRXF1YWwiXSwic291cmNlcyI6WyJNYXAudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IE1hcCBmcm9tICcuLi9NYXAnO1xyXG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XHJcbmltcG9ydCB7c2hhbGxvd30gZnJvbSAnZW56eW1lJztcclxuaW1wb3J0ICogYXMgZW56eW1lIGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCBNYXBWaWV3LCB7TWFya2VyfSBmcm9tICdyZWFjdC1uYXRpdmUtbWFwcyc7XHJcblxyXG5lbnp5bWUuY29uZmlndXJlKHthZGFwdGVyOiBuZXcgQWRhcHRlcigpfSk7XHJcbmRlc2NyaWJlKCdNYXAgY29tcG9uZW50IHRoYXQgcmVuZGVycyBhIG1hcCB2aWV3IGZvciBzZWxlY3RlZCBsb2NhdGlvbicsICgpID0+IHtcclxuICBjb25zdCByb3V0ZVBhcmFtcyA9IHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICBhZGRyZXNzOiB7XHJcbiAgICAgICAgbGF0aXR1ZGU6IDM3Ljc4ODI1LFxyXG4gICAgICAgIGxvbmdpdHVkZTogLTEyMi40MzI0LFxyXG4gICAgICAgIGxhdGl0dWRlRGVsdGE6IDAuMDkyMixcclxuICAgICAgICBsb25naXR1ZGVEZWx0YTogMC4wNDIxLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9O1xyXG4gIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93KDxNYXAgcm91dGU9e3JvdXRlUGFyYW1zfSAvPik7XHJcbiAgY29uc3QgbWFwVmlldyA9IHdyYXBwZXIuZmluZChNYXBWaWV3KTtcclxuICBjb25zdCBtYXJrZXIgPSB3cmFwcGVyLmZpbmQoTWFya2VyKTtcclxuICBpdCgncmVuZGVycyBtYXAgY29tcG9uZW50IGZvciB0aGUgc2VsZWN0ZWQgbWFwIGNvbXBvbmVudCcsICgpID0+IHtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoTWFwVmlldykpLnRvSGF2ZUxlbmd0aCgxKTtcclxuICB9KTtcclxuICBpdCgnZW5zdXJlIHRoYXQgdGhlIHJpZ2h0IHByb3ZpZGVyIGlzIGdpdmVuJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KG1hcFZpZXcucHJvcCgncHJvdmlkZXInKSkudG9FcXVhbCgnZ29vZ2xlJyk7XHJcbiAgfSk7XHJcbiAgaXQoJ2Vuc3VyZSB0aGF0IHRoZSByZWdpb24gaXMgY29ycmVjdCcsICgpID0+IHtcclxuICAgIGV4cGVjdChtYXBWaWV3LnByb3AoJ3JlZ2lvbicpKS50b0VxdWFsKHtcclxuICAgICAgbGF0aXR1ZGU6IHJvdXRlUGFyYW1zLnBhcmFtcy5hZGRyZXNzLmxhdGl0dWRlLFxyXG4gICAgICBsb25naXR1ZGU6IHJvdXRlUGFyYW1zLnBhcmFtcy5hZGRyZXNzLmxvbmdpdHVkZSxcclxuICAgICAgbGF0aXR1ZGVEZWx0YTogcm91dGVQYXJhbXMucGFyYW1zLmFkZHJlc3MubGF0aXR1ZGVEZWx0YSxcclxuICAgICAgbG9uZ2l0dWRlRGVsdGE6IHJvdXRlUGFyYW1zLnBhcmFtcy5hZGRyZXNzLmxvbmdpdHVkZURlbHRhLFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgaXQoJ3JlbmRlcnMgYSBtYXAgd2l0aCBjb3JyZWN0IG1hcmtlcicsICgpID0+IHtcclxuICAgIGV4cGVjdChtYXJrZXIpLnRvSGF2ZUxlbmd0aCgxKTtcclxuICB9KTtcclxuICBpdCgnbWFrZSBzdXJlIHRoYXQgdGhlIGNvb3JkaW5hdGVzIGdpdmVuIHRvIHRoZSBNYXJrZXIgaXMgY29ycmVjdCcsICgpID0+IHtcclxuICAgIGV4cGVjdChtYXJrZXIucHJvcCgnY29vcmRpbmF0ZScpKS50b0VxdWFsKHtcclxuICAgICAgbGF0aXR1ZGU6IHJvdXRlUGFyYW1zLnBhcmFtcy5hZGRyZXNzLmxhdGl0dWRlLFxyXG4gICAgICBsb25naXR1ZGU6IHJvdXRlUGFyYW1zLnBhcmFtcy5hZGRyZXNzLmxvbmdpdHVkZSxcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsSUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsbUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUVBLElBQUFLLGdCQUFBLEdBQUFELHVCQUFBLENBQUFK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