ecaa4544846a2fec76115307a7c3b1e9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeLocations = exports.default = exports.clearLocation = exports.addLocation = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _toolkit = require("@reduxjs/toolkit");
var initialState = {
  recentLocations: []
};
var LocationSlice = (0, _toolkit.createSlice)({
  name: 'Location',
  initialState: initialState,
  reducers: {
    initializeLocations: function initializeLocations(state, action) {
      state.recentLocations = action.payload;
    },
    addLocation: function addLocation(state, action) {
      var newLocation = action.payload;
      state.recentLocations = [].concat((0, _toConsumableArray2.default)(state.recentLocations), [newLocation]);
      if (state.recentLocations.length > 30) {
        state.recentLocations.pop();
      }
    },
    clearLocation: function clearLocation(state, action) {
      if (action.payload) {
        state.recentLocations.splice(action.payload, 1);
      } else {
        state.recentLocations = [];
      }
    }
  }
});
var _LocationSlice$action = LocationSlice.actions,
  initializeLocations = _LocationSlice$action.initializeLocations,
  addLocation = _LocationSlice$action.addLocation,
  clearLocation = _LocationSlice$action.clearLocation;
exports.clearLocation = clearLocation;
exports.addLocation = addLocation;
exports.initializeLocations = initializeLocations;
var _default = LocationSlice.reducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9vbGtpdCIsInJlcXVpcmUiLCJpbml0aWFsU3RhdGUiLCJyZWNlbnRMb2NhdGlvbnMiLCJMb2NhdGlvblNsaWNlIiwiY3JlYXRlU2xpY2UiLCJuYW1lIiwicmVkdWNlcnMiLCJpbml0aWFsaXplTG9jYXRpb25zIiwic3RhdGUiLCJhY3Rpb24iLCJwYXlsb2FkIiwiYWRkTG9jYXRpb24iLCJuZXdMb2NhdGlvbiIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJkZWZhdWx0IiwibGVuZ3RoIiwicG9wIiwiY2xlYXJMb2NhdGlvbiIsInNwbGljZSIsIl9Mb2NhdGlvblNsaWNlJGFjdGlvbiIsImFjdGlvbnMiLCJleHBvcnRzIiwiX2RlZmF1bHQiLCJyZWR1Y2VyIl0sInNvdXJjZXMiOlsiaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2xpY2UsIFBheWxvYWRBY3Rpb24gfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcclxuaW50ZXJmYWNlIExvY2F0aW9uIHtcclxuICAgIGFkZHJlc3M6IGFueTtcclxuICAgIHRpbWU6IGFueTtcclxufVxyXG5pbnRlcmZhY2UgTG9jYXRpb25TdGF0ZSB7XHJcbiAgICByZWNlbnRMb2NhdGlvbnM6IExvY2F0aW9uW107XHJcbn1cclxuY29uc3QgaW5pdGlhbFN0YXRlOiBMb2NhdGlvblN0YXRlID0ge1xyXG4gICAgcmVjZW50TG9jYXRpb25zOiBbXVxyXG59XHJcbmNvbnN0IExvY2F0aW9uU2xpY2UgPSBjcmVhdGVTbGljZSh7XHJcbiAgICBuYW1lOiAnTG9jYXRpb24nLFxyXG4gICAgaW5pdGlhbFN0YXRlLFxyXG4gICAgcmVkdWNlcnM6IHtcclxuICAgICAgICBpbml0aWFsaXplTG9jYXRpb25zKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248TG9jYXRpb25bXT4pIHtcclxuICAgICAgICAgICAgc3RhdGUucmVjZW50TG9jYXRpb25zID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICBhZGRMb2NhdGlvbjogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248TG9jYXRpb24+KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0xvY2F0aW9uID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgICAgICAgIHN0YXRlLnJlY2VudExvY2F0aW9ucyA9IFsuLi5zdGF0ZS5yZWNlbnRMb2NhdGlvbnMsIG5ld0xvY2F0aW9uXTtcclxuICAgICAgICAgICAgaWYgKHN0YXRlLnJlY2VudExvY2F0aW9ucy5sZW5ndGggPiAzMCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUucmVjZW50TG9jYXRpb25zLnBvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbGVhckxvY2F0aW9uOiAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxudW1iZXI+KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhY3Rpb24ucGF5bG9hZCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUucmVjZW50TG9jYXRpb25zLnNwbGljZShhY3Rpb24ucGF5bG9hZCwgMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5yZWNlbnRMb2NhdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbmV4cG9ydCBjb25zdCB7IGluaXRpYWxpemVMb2NhdGlvbnMsIGFkZExvY2F0aW9uLCBjbGVhckxvY2F0aW9uIH0gPSBMb2NhdGlvblNsaWNlLmFjdGlvbnM7XHJcbmV4cG9ydCBkZWZhdWx0IExvY2F0aW9uU2xpY2UucmVkdWNlcjsiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQVFBLElBQU1DLFlBQTJCLEdBQUc7RUFDaENDLGVBQWUsRUFBRTtBQUNyQixDQUFDO0FBQ0QsSUFBTUMsYUFBYSxHQUFHLElBQUFDLG9CQUFXLEVBQUM7RUFDOUJDLElBQUksRUFBRSxVQUFVO0VBQ2hCSixZQUFZLEVBQVpBLFlBQVk7RUFDWkssUUFBUSxFQUFFO0lBQ05DLG1CQUFtQixXQUFBQSxvQkFBQ0MsS0FBSyxFQUFFQyxNQUFpQyxFQUFFO01BQzFERCxLQUFLLENBQUNOLGVBQWUsR0FBR08sTUFBTSxDQUFDQyxPQUFPO0lBQzFDLENBQUM7SUFFREMsV0FBVyxFQUFFLFNBQUFBLFlBQUNILEtBQUssRUFBRUMsTUFBK0IsRUFBSztNQUNyRCxJQUFNRyxXQUFXLEdBQUdILE1BQU0sQ0FBQ0MsT0FBTztNQUNsQ0YsS0FBSyxDQUFDTixlQUFlLE1BQUFXLE1BQUEsS0FBQUMsbUJBQUEsQ0FBQUMsT0FBQSxFQUFPUCxLQUFLLENBQUNOLGVBQWUsSUFBRVUsV0FBVyxFQUFDO01BQy9ELElBQUlKLEtBQUssQ0FBQ04sZUFBZSxDQUFDYyxNQUFNLEdBQUcsRUFBRSxFQUFFO1FBQ25DUixLQUFLLENBQUNOLGVBQWUsQ0FBQ2UsR0FBRyxFQUFFO01BQy9CO0lBQ0osQ0FBQztJQUNEQyxhQUFhLEVBQUUsU0FBQUEsY0FBQ1YsS0FBSyxFQUFFQyxNQUE2QixFQUFLO01BQ3JELElBQUlBLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFO1FBQ2hCRixLQUFLLENBQUNOLGVBQWUsQ0FBQ2lCLE1BQU0sQ0FBQ1YsTUFBTSxDQUFDQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO01BQ25ELENBQUMsTUFBTTtRQUNIRixLQUFLLENBQUNOLGVBQWUsR0FBRyxFQUFFO01BQzlCO0lBQ0o7RUFDSjtBQUNKLENBQUMsQ0FBQztBQUNLLElBQUFrQixxQkFBQSxHQUE0RGpCLGFBQWEsQ0FBQ2tCLE9BQU87RUFBekVkLG1CQUFtQixHQUFBYSxxQkFBQSxDQUFuQmIsbUJBQW1CO0VBQUVJLFdBQVcsR0FBQVMscUJBQUEsQ0FBWFQsV0FBVztFQUFFTyxhQUFhLEdBQUFFLHFCQUFBLENBQWJGLGFBQWE7QUFBMkJJLE9BQUEsQ0FBQUosYUFBQSxHQUFBQSxhQUFBO0FBQUFJLE9BQUEsQ0FBQVgsV0FBQSxHQUFBQSxXQUFBO0FBQUFXLE9BQUEsQ0FBQWYsbUJBQUEsR0FBQUEsbUJBQUE7QUFBQSxJQUFBZ0IsUUFBQSxHQUMxRXBCLGFBQWEsQ0FBQ3FCLE9BQU87QUFBQUYsT0FBQSxDQUFBUCxPQUFBLEdBQUFRLFFBQUEifQ==