4d6107ebedb915aa41fb07770b0cec7e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapLocalTile = void 0;
var React = __importStar(require("react"));
var decorateMapComponent_1 = __importStar(require("./decorateMapComponent"));
var MapLocalTile = function (_React$Component) {
  (0, _inherits2.default)(MapLocalTile, _React$Component);
  var _super = _createSuper(MapLocalTile);
  function MapLocalTile() {
    (0, _classCallCheck2.default)(this, MapLocalTile);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(MapLocalTile, [{
    key: "render",
    value: function render() {
      var AIRMapLocalTile = this.getNativeComponent();
      return (0, _jsxRuntime.jsx)(AIRMapLocalTile, Object.assign({}, this.props));
    }
  }]);
  return MapLocalTile;
}(React.Component);
exports.MapLocalTile = MapLocalTile;
exports.default = (0, decorateMapComponent_1.default)(MapLocalTile, 'LocalTile', {
  google: {
    ios: decorateMapComponent_1.SUPPORTED,
    android: decorateMapComponent_1.USES_DEFAULT_IMPLEMENTATION
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfanN4UnVudGltZSIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwiaGFzT3duUHJvcGVydHkiLCJleHBvcnRzIiwiTWFwTG9jYWxUaWxlIiwiUmVhY3QiLCJkZWNvcmF0ZU1hcENvbXBvbmVudF8xIiwiX1JlYWN0JENvbXBvbmVudCIsIl9zdXBlciIsImtleSIsInJlbmRlciIsIkFJUk1hcExvY2FsVGlsZSIsImdldE5hdGl2ZUNvbXBvbmVudCIsImpzeCIsImFzc2lnbiIsInByb3BzIiwiQ29tcG9uZW50IiwiZ29vZ2xlIiwiaW9zIiwiU1VQUE9SVEVEIiwiYW5kcm9pZCIsIlVTRVNfREVGQVVMVF9JTVBMRU1FTlRBVElPTiJdLCJzb3VyY2VzIjpbIk1hcExvY2FsVGlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYXBMb2NhbFRpbGUgPSB2b2lkIDA7XG5jb25zdCBSZWFjdCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicmVhY3RcIikpO1xuY29uc3QgZGVjb3JhdGVNYXBDb21wb25lbnRfMSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9kZWNvcmF0ZU1hcENvbXBvbmVudFwiKSk7XG5jbGFzcyBNYXBMb2NhbFRpbGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGdldE5hdGl2ZUNvbXBvbmVudDtcbiAgICBnZXRNYXBNYW5hZ2VyQ29tbWFuZDtcbiAgICBnZXRVSU1hbmFnZXJDb21tYW5kO1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgQUlSTWFwTG9jYWxUaWxlID0gdGhpcy5nZXROYXRpdmVDb21wb25lbnQoKTtcbiAgICAgICAgcmV0dXJuIDxBSVJNYXBMb2NhbFRpbGUgey4uLnRoaXMucHJvcHN9Lz47XG4gICAgfVxufVxuZXhwb3J0cy5NYXBMb2NhbFRpbGUgPSBNYXBMb2NhbFRpbGU7XG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgZGVjb3JhdGVNYXBDb21wb25lbnRfMS5kZWZhdWx0KShNYXBMb2NhbFRpbGUsICdMb2NhbFRpbGUnLCB7XG4gICAgZ29vZ2xlOiB7XG4gICAgICAgIGlvczogZGVjb3JhdGVNYXBDb21wb25lbnRfMS5TVVBQT1JURUQsXG4gICAgICAgIGFuZHJvaWQ6IGRlY29yYXRlTWFwQ29tcG9uZW50XzEuVVNFU19ERUZBVUxUX0lNUExFTUVOVEFUSU9OLFxuICAgIH0sXG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFHLFVBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLDJCQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSyxnQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQU8sYUFBQUMsT0FBQSxRQUFBQyx5QkFBQSxHQUFBQyx5QkFBQSxvQkFBQUMscUJBQUEsUUFBQUMsS0FBQSxPQUFBUCxnQkFBQSxDQUFBUSxPQUFBLEVBQUFMLE9BQUEsR0FBQU0sTUFBQSxNQUFBTCx5QkFBQSxRQUFBTSxTQUFBLE9BQUFWLGdCQUFBLENBQUFRLE9BQUEsUUFBQUcsV0FBQSxFQUFBRixNQUFBLEdBQUFHLE9BQUEsQ0FBQUMsU0FBQSxDQUFBTixLQUFBLEVBQUFPLFNBQUEsRUFBQUosU0FBQSxZQUFBRCxNQUFBLEdBQUFGLEtBQUEsQ0FBQVEsS0FBQSxPQUFBRCxTQUFBLGdCQUFBZiwyQkFBQSxDQUFBUyxPQUFBLFFBQUFDLE1BQUE7QUFBQSxTQUFBSiwwQkFBQSxlQUFBTyxPQUFBLHFCQUFBQSxPQUFBLENBQUFDLFNBQUEsb0JBQUFELE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxJQUFBLDJCQUFBQyxLQUFBLG9DQUFBQyxPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBQyxJQUFBLENBQUFULE9BQUEsQ0FBQUMsU0FBQSxDQUFBSyxPQUFBLDhDQUFBSSxDQUFBO0FBQ2IsSUFBSUMsZUFBZSxHQUFJ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