8ea06bec1e34b33721d35f049d6b074a
_getJestObj().mock('react-redux', function () {
  return {
    useDispatch: jest.fn()
  };
});
_getJestObj().mock('react-native-geolocation-service', function () {
  return {
    getCurrentPosition: jest.fn(function (success) {
      var location = {
        coords: {
          latitude: 17.3920466,
          longitude: 78.4758037
        }
      };
      success(location);
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Base = _interopRequireDefault(require("../Base"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNativeGeolocationService = _interopRequireDefault(require("react-native-geolocation-service"));
var _reactRedux = require("react-redux");
var _native = require("@react-navigation/native");
require("@testing-library/jest-dom");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var timestamp = new Date(Date.now()).toLocaleString([], {
  year: 'numeric',
  month: 'numeric',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
var navigation = (0, _native.useNavigation)();
describe('Locations List Screen/Base Component', function () {
  var latitude;
  var longitude;
  var mockDispatch = jest.fn();
  var useDispatchMock;
  var fetchMock = jest.fn();
  global.fetch = fetchMock;
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    yield new Promise(function (resolve) {
      _reactNativeGeolocationService.default.getCurrentPosition(function (position) {
        latitude = position.coords.latitude;
        longitude = position.coords.longitude;
        resolve();
      });
    });
  }));
  var mockResponse = {
    results: [{
      formatted: '123 Main St, Anytown USA'
    }]
  };
  global.fetch = jest.fn().mockResolvedValue({
    json: function json() {
      return Promise.resolve(mockResponse);
    }
  });
  beforeEach(function () {
    fetchMock.mockReset();
    useDispatchMock = _reactRedux.useDispatch;
    useDispatchMock.mockReturnValue(mockDispatch);
  });
  it('renders the base component correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    var currentLabel = _reactNative.screen.getByTestId('list-current-label');
    expect(currentLabel.props.children).toBe('Current Location');
  });
  it('should have the right location', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    expect(_reactNativeGeolocationService.default.getCurrentPosition).toHaveBeenCalled();
  });
  it('renders the current location time', (0, _asyncToGenerator2.default)(function* () {
    var currentLocation = {
      address: 'unnamed road',
      time: timestamp,
      latitude: 42.123456,
      longitude: -71.123456
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render.getByTestId;
    var currentLocationTime = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-current-time');
    });
    expect(currentLocationTime.props.children).toBe(currentLocation.time);
  }));
  test('displays current location', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      results: [{
        formatted: '123 Main St, Anytown USA'
      }]
    };
    global.fetch = jest.fn().mockResolvedValue({
      json: function json() {
        return Promise.resolve(mockResponse);
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var currentLocationName = getByTestId('list-current-name');
      expect(currentLocationName).toHaveTextContent('123 Main St, Anytown USA');
    });
  }));
  it('clears all locations on button press', (0, _asyncToGenerator2.default)(function* () {
    var clearAllLocations = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactNative2.Button, {
        title: "Clear All Locations",
        onPress: clearAllLocations,
        testID: "list-clear-all-button"
      })),
      getByTestId = _render3.getByTestId;
    var clearAllButton = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-clear-all-button');
    });
    _reactNative.fireEvent.press(clearAllButton);
    expect(clearAllLocations).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VEaXNwYXRjaCIsImplc3QiLCJmbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsInN1Y2Nlc3MiLCJsb2NhdGlvbiIsImNvb3JkcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwidXNlTmF2aWdhdGlvbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfQmFzZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZUdlb2xvY2F0aW9uU2VydmljZSIsIl9yZWFjdFJlZHV4IiwiX25hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInRvTG9jYWxlU3RyaW5nIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsIm5hdmlnYXRpb24iLCJkZXNjcmliZSIsIm1vY2tEaXNwYXRjaCIsInVzZURpc3BhdGNoTW9jayIsImZldGNoTW9jayIsImdsb2JhbCIsImZldGNoIiwiYmVmb3JlQWxsIiwiZGVmYXVsdCIsIlByb21pc2UiLCJyZXNvbHZlIiwiR2VvbG9jYXRpb24iLCJwb3NpdGlvbiIsIm1vY2tSZXNwb25zZSIsInJlc3VsdHMiLCJmb3JtYXR0ZWQiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImpzb24iLCJiZWZvcmVFYWNoIiwibW9ja1Jlc2V0IiwiaXQiLCJyZW5kZXIiLCJqc3giLCJjdXJyZW50TGFiZWwiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInByb3BzIiwiY2hpbGRyZW4iLCJ0b0JlIiwidG9IYXZlQmVlbkNhbGxlZCIsImN1cnJlbnRMb2NhdGlvbiIsImFkZHJlc3MiLCJ0aW1lIiwiX3JlbmRlciIsImN1cnJlbnRMb2NhdGlvblRpbWUiLCJ3YWl0Rm9yIiwidGVzdCIsIl9yZW5kZXIyIiwiY3VycmVudExvY2F0aW9uTmFtZSIsInRvSGF2ZVRleHRDb250ZW50IiwiY2xlYXJBbGxMb2NhdGlvbnMiLCJfcmVuZGVyMyIsIkJ1dHRvbiIsInRpdGxlIiwib25QcmVzcyIsInRlc3RJRCIsImNsZWFyQWxsQnV0dG9uIiwiZmlyZUV2ZW50IiwicHJlc3MiXSwic291cmNlcyI6WyJCYXNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlIGZyb20gJy4uL0Jhc2UnO1xyXG5pbXBvcnQge1xyXG4gIHJlbmRlcixcclxuICBmaXJlRXZlbnQsXHJcbiAgc2NyZWVuLFxyXG4gIHdhaXRGb3IsXHJcbn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZmV0Y2hNb2NrIGZyb20gJ2plc3QtZmV0Y2gtbW9jayc7XHJcbmltcG9ydCBHZW9sb2NhdGlvbiBmcm9tICdyZWFjdC1uYXRpdmUtZ2VvbG9jYXRpb24tc2VydmljZSc7XHJcbmltcG9ydCB7dXNlRGlzcGF0Y2h9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XHJcbmltcG9ydCB7QnV0dG9ufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5kZWNsYXJlIHZhciBnbG9iYWw6IGFueTtcclxuamVzdC5tb2NrKCdyZWFjdC1yZWR1eCcsICgpID0+ICh7XHJcbiAgdXNlRGlzcGF0Y2g6IGplc3QuZm4oKSxcclxufSkpO1xyXG5jb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZShEYXRlLm5vdygpKS50b0xvY2FsZVN0cmluZyhbXSwge1xyXG4gIHllYXI6ICdudW1lcmljJyxcclxuICBtb250aDogJ251bWVyaWMnLFxyXG4gIGRheTogJ251bWVyaWMnLFxyXG4gIGhvdXI6ICcyLWRpZ2l0JyxcclxuICBtaW51dGU6ICcyLWRpZ2l0JyxcclxufSk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtZ2VvbG9jYXRpb24tc2VydmljZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgZ2V0Q3VycmVudFBvc2l0aW9uOiBqZXN0LmZuKHN1Y2Nlc3MgPT4ge1xyXG4gICAgICBjb25zdCBsb2NhdGlvbiA9IHtcclxuICAgICAgICBjb29yZHM6IHtcclxuICAgICAgICAgIGxhdGl0dWRlOiAxNy4zOTIwNDY2LFxyXG4gICAgICAgICAgbG9uZ2l0dWRlOiA3OC40NzU4MDM3LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICAgIHN1Y2Nlc3MobG9jYXRpb24pO1xyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ0xvY2F0aW9ucyBMaXN0IFNjcmVlbi9CYXNlIENvbXBvbmVudCcsICgpID0+IHtcclxuICBsZXQgbGF0aXR1ZGU6IG51bWJlcjtcclxuICBsZXQgbG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgY29uc3QgbW9ja0Rpc3BhdGNoID0gamVzdC5mbigpO1xyXG4gIGxldCB1c2VEaXNwYXRjaE1vY2s6IGplc3QuTW9jaztcclxuICBjb25zdCBmZXRjaE1vY2sgPSBqZXN0LmZuKCk7XHJcbiAgZ2xvYmFsLmZldGNoID0gZmV0Y2hNb2NrO1xyXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcclxuICAgICAgR2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKHBvc2l0aW9uID0+IHtcclxuICAgICAgICBsYXRpdHVkZSA9IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZTtcclxuICAgICAgICBsb25naXR1ZGUgPSBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XHJcbiAgICByZXN1bHRzOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBmb3JtYXR0ZWQ6ICcxMjMgTWFpbiBTdCwgQW55dG93biBVU0EnLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICB9O1xyXG4gIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUobW9ja1Jlc3BvbnNlKSxcclxuICB9KTtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGZldGNoTW9jay5tb2NrUmVzZXQoKTtcclxuICAgIHVzZURpc3BhdGNoTW9jayA9IHVzZURpc3BhdGNoIGFzIGplc3QuTW9jaztcclxuICAgIHVzZURpc3BhdGNoTW9jay5tb2NrUmV0dXJuVmFsdWUobW9ja0Rpc3BhdGNoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgdGhlIGJhc2UgY29tcG9uZW50IGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIHJlbmRlcig8QmFzZSAvPik7XHJcbiAgICBjb25zdCBjdXJyZW50TGFiZWwgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xpc3QtY3VycmVudC1sYWJlbCcpO1xyXG4gICAgZXhwZWN0KGN1cnJlbnRMYWJlbC5wcm9wcy5jaGlsZHJlbikudG9CZSgnQ3VycmVudCBMb2NhdGlvbicpO1xyXG4gIH0pO1xyXG4gIGl0KCdzaG91bGQgaGF2ZSB0aGUgcmlnaHQgbG9jYXRpb24nLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoPEJhc2UgLz4pO1xyXG4gICAgZXhwZWN0KEdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbikudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG4gIGl0KCdyZW5kZXJzIHRoZSBjdXJyZW50IGxvY2F0aW9uIHRpbWUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50TG9jYXRpb24gPSB7XHJcbiAgICAgIGFkZHJlc3M6ICd1bm5hbWVkIHJvYWQnLFxyXG4gICAgICB0aW1lOiB0aW1lc3RhbXAsXHJcbiAgICAgIGxhdGl0dWRlOiA0Mi4xMjM0NTYsXHJcbiAgICAgIGxvbmdpdHVkZTogLTcxLjEyMzQ1NixcclxuICAgIH07XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxCYXNlIC8+KTtcclxuICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvblRpbWUgPSBhd2FpdCB3YWl0Rm9yKCgpID0+XHJcbiAgICAgIGdldEJ5VGVzdElkKCdsaXN0LWN1cnJlbnQtdGltZScpLFxyXG4gICAgKTtcclxuICAgIGV4cGVjdChjdXJyZW50TG9jYXRpb25UaW1lLnByb3BzLmNoaWxkcmVuKS50b0JlKGN1cnJlbnRMb2NhdGlvbi50aW1lKTtcclxuICB9KTtcclxuICB0ZXN0KCdkaXNwbGF5cyBjdXJyZW50IGxvY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xyXG4gICAgICByZXN1bHRzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZm9ybWF0dGVkOiAnMTIzIE1haW4gU3QsIEFueXRvd24gVVNBJyxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgfTtcclxuICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZShtb2NrUmVzcG9uc2UpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8QmFzZSAvPik7XHJcblxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvbk5hbWUgPSBnZXRCeVRlc3RJZCgnbGlzdC1jdXJyZW50LW5hbWUnKTtcclxuICAgICAgZXhwZWN0KGN1cnJlbnRMb2NhdGlvbk5hbWUpLnRvSGF2ZVRleHRDb250ZW50KCcxMjMgTWFpbiBTdCwgQW55dG93biBVU0EnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyBjb25zdCBjdXJyZW50TG9jYXRpb24gPSB7XHJcbiAgLy8gICBhZGRyZXNzOlxyXG4gIC8vICAgICAndW5uYW1lZCByb2FkLCBXYXJkIDc4IEd1bmZvdW5kcnksIEh5ZGVyYWJhZCAtIDUwMDAwMSwgVGVsYW5nYW5hLCBJbmRpYScsXHJcbiAgLy8gICB0aW1lOiB0aW1lc3RhbXAsXHJcbiAgLy8gICBsYXRpdHVkZSxcclxuICAvLyAgIGxvbmdpdHVkZSxcclxuICAvLyB9O1xyXG4gIC8vIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEJhc2UgLz4pO1xyXG4gIC8vIGNvbnN0IG1vY2tKc29uUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgLy8gICByZXN1bHRzOiBbe2Zvcm1hdHRlZDogY3VycmVudExvY2F0aW9uLmFkZHJlc3N9XSxcclxuICAvLyB9KTtcclxuICAvLyBjb25zdCBtb2NrRmV0Y2hQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAvLyAgIGpzb246ICgpID0+IG1vY2tKc29uUHJvbWlzZSxcclxuICAvLyB9KTtcclxuICAvLyBmZXRjaE1vY2subW9ja1JldHVyblZhbHVlT25jZShtb2NrRmV0Y2hQcm9taXNlIGFzIFByb21pc2U8UmVzcG9uc2U+KTtcclxuICAvLyBjb25zdCBjdXJyZW50TG9jYXRpb25BZGRyZXNzID0gYXdhaXQgd2FpdEZvcigoKSA9PlxyXG4gIC8vICAgZ2V0QnlUZXN0SWQoJ2xpc3QtY3VycmVudC1uYW1lJyksXHJcbiAgLy8gKTtcclxuICAvLyBjb25zb2xlLmxvZyhjdXJyZW50TG9jYXRpb25BZGRyZXNzKTtcclxuICAvLyBleHBlY3QoY3VycmVudExvY2F0aW9uQWRkcmVzcy5wcm9wcy5jaGlsZHJlbikudG9CZShjdXJyZW50TG9jYXRpb24uYWRkcmVzcyk7XHJcbiAgLy8gfSk7XHJcbiAgLy8gaXQoJ3JlbmRlcnMgdGhlIHdob2xlIGxvY2F0aW9uIGl0ZW0gY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gIC8vICAgY29uc3QgY3VycmVudExvY2F0aW9uID0ge1xyXG4gIC8vICAgICBhZGRyZXNzOlxyXG4gIC8vICAgICAgICd1bm5hbWVkIHJvYWQsIFdhcmQgNzggR3VuZm91bmRyeSwgSHlkZXJhYmFkIC0gNTAwMDAxLCBUZWxhbmdhbmEsIEluZGlhJyxcclxuICAvLyAgICAgdGltZTogdGltZXN0YW1wLFxyXG4gIC8vICAgICBsYXRpdHVkZSxcclxuICAvLyAgICAgbG9uZ2l0dWRlLFxyXG4gIC8vICAgfTtcclxuICAvLyAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEJhc2UgLz4pO1xyXG4gIC8vICAgY29uc3QgY3VycmVudExvY2F0aW9uSXRlbSA9IGF3YWl0IHdhaXRGb3IoKCkgPT5cclxuICAvLyAgICAgZ2V0QnlUZXN0SWQoJ2xpc3QtY3VycmVudC1pdGVtJyksXHJcbiAgLy8gICApO1xyXG4gIC8vICAgZmlyZUV2ZW50LnByZXNzKGN1cnJlbnRMb2NhdGlvbkl0ZW0pO1xyXG4gIC8vICAgZXhwZWN0KG5hdmlnYXRpb24ubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdNYXAnLCB7XHJcbiAgLy8gICAgIGFkZHJlc3M6IGN1cnJlbnRMb2NhdGlvbixcclxuICAvLyAgIH0pO1xyXG4gIC8vIH0pO1xyXG4gIGl0KCdjbGVhcnMgYWxsIGxvY2F0aW9ucyBvbiBidXR0b24gcHJlc3MnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBjbGVhckFsbExvY2F0aW9ucyA9IGplc3QuZm4oKTtcclxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXHJcbiAgICAgIDxCdXR0b25cclxuICAgICAgICB0aXRsZT1cIkNsZWFyIEFsbCBMb2NhdGlvbnNcIlxyXG4gICAgICAgIG9uUHJlc3M9e2NsZWFyQWxsTG9jYXRpb25zfVxyXG4gICAgICAgIHRlc3RJRD1cImxpc3QtY2xlYXItYWxsLWJ1dHRvblwiXHJcbiAgICAgIC8+LFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGNsZWFyQWxsQnV0dG9uID0gYXdhaXQgd2FpdEZvcigoKSA9PlxyXG4gICAgICBnZXRCeVRlc3RJZCgnbGlzdC1jbGVhci1hbGwtYnV0dG9uJyksXHJcbiAgICApO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKGNsZWFyQWxsQnV0dG9uKTtcclxuICAgIGV4cGVjdChjbGVhckFsbExvY2F0aW9ucykudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG4gIC8vIGl0KCdzaG91bGQgZGlzcGxheSBwcmV2aW91cyBsb2NhdGlvbiBuYW1lIGFmdGVyIDUgbWludXRlcycsIGFzeW5jICgpID0+IHtcclxuICAvLyAgIGNvbnN0IHtxdWVyeUJ5VGVzdElkLCBnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEJhc2UgLz4pO1xyXG4gIC8vICAgY29uc3QgcHJldmlvdXNMb2NhdGlvbk5hbWUgPSBnZXRCeVRlc3RJZCgnTGlzdC1wcmV2aW91cy1uYW1lLTAnKTtcclxuICAvLyAgIGV4cGVjdChwcmV2aW91c0xvY2F0aW9uTmFtZSkudG9CZU51bGwoKTtcclxuICAvLyAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gIC8vICAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgnTGlzdC1wcmV2aW91cy1uYW1lLTAnKSkubm90LnRvQmVOdWxsKCk7XHJcbiAgLy8gICB9KTtcclxuXHJcbiAgLy8gICBjb25zdCBmaXJzdFByZXZpb3VzTG9jYXRpb25OYW1lID0gZ2V0QnlUZXN0SWQoJ0xpc3QtcHJldmlvdXMtbmFtZS0wJyk7XHJcbiAgLy8gICBleHBlY3QoZmlyc3RQcmV2aW91c0xvY2F0aW9uTmFtZS5wcm9wcy5jaGlsZHJlbikudG9Db250YWluKFxyXG4gIC8vICAgICAnc29tZSBsb2NhdGlvbiBuYW1lJyxcclxuICAvLyAgICk7XHJcbiAgLy8gfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQWdCQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsYUFBYSxFQUFFO0VBQUEsT0FBTztJQUM5QkMsV0FBVyxFQUFFQyxJQUFJLENBQUNDLEVBQUU7RUFDdEIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQVNISixXQUFBLEdBQUtDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxZQUFNO0VBQ2xELE9BQU87SUFDTEksa0JBQWtCLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFVBQUFFLE9BQU8sRUFBSTtNQUNyQyxJQUFNQyxRQUFRLEdBQUc7UUFDZkMsTUFBTSxFQUFFO1VBQ05DLFFBQVEsRUFBRSxVQUFVO1VBQ3BCQyxTQUFTLEVBQUU7UUFDYjtNQUNGLENBQUM7TUFDREosT0FBTyxDQUFDQyxRQUFRLENBQUM7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRlAsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xVLGFBQWEsRUFBRVIsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ1EsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVWLElBQUksQ0FBQ0MsRUFBRTtJQUNuQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFVLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FB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