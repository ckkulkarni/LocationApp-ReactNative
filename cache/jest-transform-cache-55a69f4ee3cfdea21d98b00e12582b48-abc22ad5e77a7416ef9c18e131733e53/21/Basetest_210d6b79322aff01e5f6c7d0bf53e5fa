46c5ec2601c282c43bfe957381e0d969
_getJestObj().mock('react-redux', function () {
  return {
    useDispatch: jest.fn()
  };
});
_getJestObj().mock('react-native-geolocation-service', function () {
  return {
    getCurrentPosition: jest.fn(function (success, error, options) {
      var location = {
        coords: {
          latitude: 17.3920466,
          longitude: 78.4758037
        }
      };
      success(location);
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Base = _interopRequireDefault(require("../Base"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNativeGeolocationService = _interopRequireDefault(require("react-native-geolocation-service"));
var _reactRedux = require("react-redux");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Locations List Screen/Base Component', function () {
  var mockDispatch = jest.fn();
  var useDispatchMock;
  beforeEach(function () {
    useDispatchMock = _reactRedux.useDispatch;
    useDispatchMock.mockReturnValue(mockDispatch);
  });
  it('renders the base component correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    expect(_reactNative.screen.getByTestId('list-current-label')).toBe('unnamed road, Ward 78 Gunfoundry, Hyderabad - 500001, Telangana, India');
    console.log(_reactNative.screen.getByTestId('list-current-label'));
  });
  it('should have the right location', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    expect(_reactNativeGeolocationService.default.getCurrentPosition).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VEaXNwYXRjaCIsImplc3QiLCJmbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsInN1Y2Nlc3MiLCJlcnJvciIsIm9wdGlvbnMiLCJsb2NhdGlvbiIsImNvb3JkcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwidXNlTmF2aWdhdGlvbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfQmFzZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZUdlb2xvY2F0aW9uU2VydmljZSIsIl9yZWFjdFJlZHV4IiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwibW9ja0Rpc3BhdGNoIiwidXNlRGlzcGF0Y2hNb2NrIiwiYmVmb3JlRWFjaCIsIml0IiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGVzdElkIiwidG9CZSIsImNvbnNvbGUiLCJsb2ciLCJHZW9sb2NhdGlvbiIsInRvSGF2ZUJlZW5DYWxsZWQiXSwic291cmNlcyI6WyJCYXNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlIGZyb20gJy4uL0Jhc2UnO1xyXG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50LCBzY3JlZW59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEdlb2xvY2F0aW9uIGZyb20gJ3JlYWN0LW5hdGl2ZS1nZW9sb2NhdGlvbi1zZXJ2aWNlJztcclxuaW1wb3J0IHt1c2VEaXNwYXRjaH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjayc7XHJcbmltcG9ydCB7dXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuXHJcbmplc3QubW9jaygncmVhY3QtcmVkdXgnLCAoKSA9PiAoe1xyXG4gIHVzZURpc3BhdGNoOiBqZXN0LmZuKCksXHJcbn0pKTtcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtZ2VvbG9jYXRpb24tc2VydmljZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgZ2V0Q3VycmVudFBvc2l0aW9uOiBqZXN0LmZuKChzdWNjZXNzLCBlcnJvciwgb3B0aW9ucykgPT4ge1xyXG4gICAgICBjb25zdCBsb2NhdGlvbiA9IHtcclxuICAgICAgICBjb29yZHM6IHtcclxuICAgICAgICAgIGxhdGl0dWRlOiAxNy4zOTIwNDY2LFxyXG4gICAgICAgICAgbG9uZ2l0dWRlOiA3OC40NzU4MDM3LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICAgIHN1Y2Nlc3MobG9jYXRpb24pO1xyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ0xvY2F0aW9ucyBMaXN0IFNjcmVlbi9CYXNlIENvbXBvbmVudCcsICgpID0+IHtcclxuICBjb25zdCBtb2NrRGlzcGF0Y2ggPSBqZXN0LmZuKCk7XHJcbiAgbGV0IHVzZURpc3BhdGNoTW9jazogamVzdC5Nb2NrO1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgdXNlRGlzcGF0Y2hNb2NrID0gdXNlRGlzcGF0Y2ggYXMgamVzdC5Nb2NrO1xyXG4gICAgdXNlRGlzcGF0Y2hNb2NrLm1vY2tSZXR1cm5WYWx1ZShtb2NrRGlzcGF0Y2gpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncmVuZGVycyB0aGUgYmFzZSBjb21wb25lbnQgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgcmVuZGVyKDxCYXNlIC8+KTtcclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xpc3QtY3VycmVudC1sYWJlbCcpKS50b0JlKFxyXG4gICAgICAndW5uYW1lZCByb2FkLCBXYXJkIDc4IEd1bmZvdW5kcnksIEh5ZGVyYWJhZCAtIDUwMDAwMSwgVGVsYW5nYW5hLCBJbmRpYScsXHJcbiAgICApO1xyXG4gICAgY29uc29sZS5sb2coc2NyZWVuLmdldEJ5VGVzdElkKCdsaXN0LWN1cnJlbnQtbGFiZWwnKSk7XHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCBoYXZlIHRoZSByaWdodCBsb2NhdGlvbicsICgpID0+IHtcclxuICAgIHJlbmRlcig8QmFzZSAvPik7XHJcbiAgICBleHBlY3QoR2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQVFBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUU7RUFBQSxPQUFPO0lBQzlCQyxXQUFXLEVBQUVDLElBQUksQ0FBQ0MsRUFBRTtFQUN0QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQ0hKLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLFlBQU07RUFDbEQsT0FBTztJQUNMSSxrQkFBa0IsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBQ0UsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBSztNQUN2RCxJQUFNQyxRQUFRLEdBQUc7UUFDZkMsTUFBTSxFQUFFO1VBQ05DLFFBQVEsRUFBRSxVQUFVO1VBQ3BCQyxTQUFTLEVBQUU7UUFDYjtNQUNGLENBQUM7TUFDRE4sT0FBTyxDQUFDRyxRQUFRLENBQUM7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRlQsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xZLGFBQWEsRUFBRVYsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ1UsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVaLElBQUksQ0FBQ0MsRUFBRTtJQUNuQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFZLHNCQUFBLEdBQUFDLE9BQUE7QUE5QkgsSUFBQUMsS0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksOEJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUF3QyxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBakIsWUFBQTtFQUFBLElBQUF3QixRQUFBLEdBQUFQLE9BQUE7SUFBQWQsSUFBQSxHQUFBcUIsUUFBQSxDQUFBckIsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUE0QnhDc0IsUUFBUSxDQUFDLHNDQUFzQyxFQUFFLFlBQU07RUFDckQsSUFBTUMsWUFBWSxHQUFHdkIsSUFBSSxDQUFDQyxFQUFFLEVBQUU7RUFDOUIsSUFBSXVCLGVBQTBCO0VBQzlCQyxVQUFVLENBQUMsWUFBTTtJQUNmRCxlQUFlLEdBQUd6Qix1QkFBd0I7SUFDMUN5QixlQUFlLENBQUNiLGVBQWUsQ0FBQ1ksWUFBWSxDQUFDO0VBQy9DLENBQUMsQ0FBQztFQUVGRyxFQUFFLENBQUMsc0NBQXNDLEVBQUUsWUFBTTtJQUMvQyxJQUFBQyxtQkFBTSxFQUFDLElBQUFQLFdBQUEsQ0FBQVEsR0FBQSxFQUFDYixLQUFBLENBQUFjLE9BQUksS0FBRyxDQUFDO0lBQ2hCQyxNQUFNLENBQUNDLG1CQUFNLENBQUNDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FDbkQsd0VBQXdFLENBQ3pFO0lBQ0RDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSixtQkFBTSxDQUFDQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztFQUN2RCxDQUFDLENBQUM7RUFDRk4sRUFBRSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07SUFDekMsSUFBQUMsbUJBQU0sRUFBQyxJQUFBUCxXQUFBLENBQUFRLEdBQUEsRUFBQ2IsS0FBQSxDQUFBYyxPQUFJLEtBQUcsQ0FBQztJQUNoQkMsTUFBTSxDQUFDTSxzQ0FBVyxDQUFDbEMsa0JBQWtCLENBQUMsQ0FBQ21DLGdCQUFnQixFQUFFO0VBQzNELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9