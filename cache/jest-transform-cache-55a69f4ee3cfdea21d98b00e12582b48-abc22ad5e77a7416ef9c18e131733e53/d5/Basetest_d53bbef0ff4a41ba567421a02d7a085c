dcce1c547a1117b1d008cfb7937efda1
_getJestObj().mock('react-redux', function () {
  return {
    useDispatch: jest.fn()
  };
});
_getJestObj().mock('react-native-geolocation-service', function () {
  return {
    getCurrentPosition: jest.fn(function (success) {
      var location = {
        coords: {
          latitude: 17.3920466,
          longitude: 78.4758037
        }
      };
      success(location);
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Base = _interopRequireDefault(require("../Base"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNativeGeolocationService = _interopRequireDefault(require("react-native-geolocation-service"));
var _reactRedux = require("react-redux");
var _native = require("@react-navigation/native");
require("@testing-library/jest-dom");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var timestamp = new Date(Date.now()).toLocaleString([], {
  year: 'numeric',
  month: 'numeric',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
var navigation = (0, _native.useNavigation)();
describe('Locations List Screen/Base Component', function () {
  var latitude;
  var longitude;
  var mockDispatch = jest.fn();
  var useDispatchMock;
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    yield new Promise(function (resolve) {
      _reactNativeGeolocationService.default.getCurrentPosition(function (position) {
        latitude = position.coords.latitude;
        longitude = position.coords.longitude;
        resolve();
      });
    });
  }));
  beforeEach(function () {
    useDispatchMock = _reactRedux.useDispatch;
    useDispatchMock.mockReturnValue(mockDispatch);
  });
  it('renders the base component correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    var currentLabel = _reactNative.screen.getByTestId('list-current-label');
    expect(currentLabel.props.children).toBe('Current Location');
  });
  it('should have the right location', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    expect(_reactNativeGeolocationService.default.getCurrentPosition).toHaveBeenCalled();
  });
  it('renders the current location time', (0, _asyncToGenerator2.default)(function* () {
    var currentLocation = {
      address: 'unnamed road',
      time: timestamp,
      latitude: 42.123456,
      longitude: -71.123456
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render.getByTestId;
    var currentLocationTime = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-current-time');
    });
    expect(currentLocationTime.props.children).toBe(currentLocation.time);
  }));
  it('renders the current location address', (0, _asyncToGenerator2.default)(function* () {
    var currentLocation = {
      address: 'unnamed road, Ward 78 Gunfoundry, Hyderabad - 500001, Telangana, India',
      time: timestamp,
      latitude: latitude,
      longitude: longitude
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render2.getByTestId;
    var currentLocationAddress = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-current-name');
    });
    console.log(currentLocationAddress);
    expect(currentLocationAddress.props.children).toBe(currentLocation.address);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,