bae5314a4a19aa70b21ad4cadedb90f7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapMarker = void 0;
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var decorateMapComponent_1 = __importStar(require("./decorateMapComponent"));
var MapMarkerNativeComponent_1 = require("./MapMarkerNativeComponent");
var MapMarker = function (_React$Component) {
  (0, _inherits2.default)(MapMarker, _React$Component);
  var _super = _createSuper(MapMarker);
  function MapMarker(props) {
    var _this;
    (0, _classCallCheck2.default)(this, MapMarker);
    _this = _super.call(this, props);
    _this.marker = React.createRef();
    _this.showCallout = _this.showCallout.bind((0, _assertThisInitialized2.default)(_this));
    _this.hideCallout = _this.hideCallout.bind((0, _assertThisInitialized2.default)(_this));
    _this.redrawCallout = _this.redrawCallout.bind((0, _assertThisInitialized2.default)(_this));
    _this.animateMarkerToCoordinate = _this.animateMarkerToCoordinate.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  (0, _createClass2.default)(MapMarker, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var _this$marker$current;
      console.warn('setNativeProps is deprecated and will be removed in next major release');
      (_this$marker$current = this.marker.current) == null ? void 0 : _this$marker$current.setNativeProps(props);
    }
  }, {
    key: "showCallout",
    value: function showCallout() {
      if (this.marker.current) {
        MapMarkerNativeComponent_1.Commands.showCallout(this.marker.current);
      }
    }
  }, {
    key: "hideCallout",
    value: function hideCallout() {
      if (this.marker.current) {
        MapMarkerNativeComponent_1.Commands.hideCallout(this.marker.current);
      }
    }
  }, {
    key: "redrawCallout",
    value: function redrawCallout() {
      if (this.marker.current) {
        MapMarkerNativeComponent_1.Commands.redrawCallout(this.marker.current);
      }
    }
  }, {
    key: "animateMarkerToCoordinate",
    value: function animateMarkerToCoordinate(coordinate) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
      if (this.marker.current) {
        MapMarkerNativeComponent_1.Commands.animateMarkerToCoordinate(this.marker.current, coordinate, duration);
      }
    }
  }, {
    key: "redraw",
    value: function redraw() {
      if (this.marker.current) {
        MapMarkerNativeComponent_1.Commands.redraw(this.marker.current);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props$stopPropa = this.props.stopPropagation,
        stopPropagation = _this$props$stopPropa === void 0 ? false : _this$props$stopPropa;
      var image;
      if (this.props.image) {
        image = react_native_1.Image.resolveAssetSource(this.props.image) || {};
        image = image.uri || this.props.image;
      }
      var icon;
      if (this.props.icon) {
        icon = react_native_1.Image.resolveAssetSource(this.props.icon) || {};
        icon = icon.uri;
      }
      var AIRMapMarker = this.getNativeComponent();
      return (0, _jsxRuntime.jsx)(AIRMapMarker, Object.assign({}, this.props, {
        ref: this.marker,
        image: image,
        icon: icon,
        style: [styles.marker, this.props.style],
        onPress: function onPress(event) {
          if (stopPropagation) {
            event.stopPropagation();
          }
          if (_this2.props.onPress) {
            _this2.props.onPress(event);
          }
        }
      }));
    }
  }]);
  return MapMarker;
}(React.Component);
exports.MapMarker = MapMarker;
var styles = react_native_1.StyleSheet.create({
  marker: {
    position: 'absolute',
    backgroundColor: 'transparent'
  }
});
MapMarker.Animated = react_native_1.Animated.createAnimatedComponent(MapMarker);
exports.default = (0, decorateMapComponent_1.default)(MapMarker, 'Marker', {
  google: {
    ios: decorateMapComponent_1.SUPPORTED,
    android: decorateMapComponent_1.USES_DEFAULT_IMPLEMENTATION
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,