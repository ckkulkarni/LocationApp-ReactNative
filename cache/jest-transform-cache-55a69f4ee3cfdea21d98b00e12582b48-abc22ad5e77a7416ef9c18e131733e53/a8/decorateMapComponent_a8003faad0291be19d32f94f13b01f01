07ab6ae43456c1726e1dbf8bce13e4a0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.googleMapIsInstalled = exports.createNotSupportedComponent = exports.getNativeMapName = exports.ProviderContext = exports.NOT_SUPPORTED = exports.USES_DEFAULT_IMPLEMENTATION = exports.SUPPORTED = void 0;
var react_1 = require("react");
var react_native_1 = require("react-native");
var ProviderConstants_1 = require("./ProviderConstants");
exports.SUPPORTED = 'SUPPORTED';
exports.USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';
exports.NOT_SUPPORTED = 'NOT_SUPPORTED';
exports.ProviderContext = (0, react_1.createContext)(undefined);
function getNativeMapName(provider) {
  if (react_native_1.Platform.OS === 'android') {
    return 'AIRMap';
  }
  if (provider === ProviderConstants_1.PROVIDER_GOOGLE) {
    return 'AIRGoogleMap';
  }
  return 'AIRMap';
}
exports.getNativeMapName = getNativeMapName;
function getNativeComponentName(provider, component) {
  return "" + getNativeMapName(provider) + component;
}
var createNotSupportedComponent = function createNotSupportedComponent(message) {
  return function () {
    console.error(message);
    return null;
  };
};
exports.createNotSupportedComponent = createNotSupportedComponent;
exports.googleMapIsInstalled = !!react_native_1.UIManager.getViewManagerConfig(getNativeMapName(ProviderConstants_1.PROVIDER_GOOGLE));
function decorateMapComponent(Component, componentName, providers) {
  var components = {};
  var getDefaultComponent = function getDefaultComponent() {
    return (0, react_native_1.requireNativeComponent)(getNativeComponentName(undefined, componentName));
  };
  Component.contextType = exports.ProviderContext;
  Component.prototype.getNativeComponent = function getNativeComponent() {
    var provider = this.context;
    var key = provider || 'default';
    if (components[key]) {
      return components[key];
    }
    if (provider === ProviderConstants_1.PROVIDER_DEFAULT) {
      components[key] = getDefaultComponent();
      return components[key];
    }
    var providerInfo = providers[provider];
    if (react_native_1.Platform.OS !== 'android' && react_native_1.Platform.OS !== 'ios') {
      throw new Error("react-native-maps doesn't support " + react_native_1.Platform.OS);
    }
    var platformSupport = providerInfo[react_native_1.Platform.OS];
    var nativeComponentName = getNativeComponentName(provider, componentName);
    if (platformSupport === exports.NOT_SUPPORTED) {
      components[key] = (0, exports.createNotSupportedComponent)("react-native-maps: " + nativeComponentName + " is not supported on " + react_native_1.Platform.OS);
    } else if (platformSupport === exports.SUPPORTED) {
      if (provider !== ProviderConstants_1.PROVIDER_GOOGLE || react_native_1.Platform.OS === 'ios' && exports.googleMapIsInstalled) {
        components[key] = (0, react_native_1.requireNativeComponent)(nativeComponentName);
      }
    } else {
      if (!components.default) {
        components.default = getDefaultComponent();
      }
      components[key] = components.default;
    }
    return components[key];
  };
  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {
    var nativeComponentName = getNativeComponentName(this.context, componentName);
    return react_native_1.UIManager.getViewManagerConfig(nativeComponentName).Commands[name];
  };
  Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {
    var nativeComponentName = getNativeComponentName(this.context, componentName) + "Manager";
    return react_native_1.NativeModules[nativeComponentName][name];
  };
  return Component;
}
exports.default = decorateMapComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdvb2dsZU1hcElzSW5zdGFsbGVkIiwiY3JlYXRlTm90U3VwcG9ydGVkQ29tcG9uZW50IiwiZ2V0TmF0aXZlTWFwTmFtZSIsIlByb3ZpZGVyQ29udGV4dCIsIk5PVF9TVVBQT1JURUQiLCJVU0VTX0RFRkFVTFRfSU1QTEVNRU5UQVRJT04iLCJTVVBQT1JURUQiLCJyZWFjdF8xIiwicmVxdWlyZSIsInJlYWN0X25hdGl2ZV8xIiwiUHJvdmlkZXJDb25zdGFudHNfMSIsImNyZWF0ZUNvbnRleHQiLCJ1bmRlZmluZWQiLCJwcm92aWRlciIsIlBsYXRmb3JtIiwiT1MiLCJQUk9WSURFUl9HT09HTEUiLCJnZXROYXRpdmVDb21wb25lbnROYW1lIiwiY29tcG9uZW50IiwibWVzc2FnZSIsImNvbnNvbGUiLCJlcnJvciIsIlVJTWFuYWdlciIsImdldFZpZXdNYW5hZ2VyQ29uZmlnIiwiZGVjb3JhdGVNYXBDb21wb25lbnQiLCJDb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwicHJvdmlkZXJzIiwiY29tcG9uZW50cyIsImdldERlZmF1bHRDb21wb25lbnQiLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50IiwiY29udGV4dFR5cGUiLCJwcm90b3R5cGUiLCJnZXROYXRpdmVDb21wb25lbnQiLCJjb250ZXh0Iiwia2V5IiwiUFJPVklERVJfREVGQVVMVCIsInByb3ZpZGVySW5mbyIsIkVycm9yIiwicGxhdGZvcm1TdXBwb3J0IiwibmF0aXZlQ29tcG9uZW50TmFtZSIsImRlZmF1bHQiLCJnZXRVSU1hbmFnZXJDb21tYW5kIiwibmFtZSIsIkNvbW1hbmRzIiwiZ2V0TWFwTWFuYWdlckNvbW1hbmQiLCJOYXRpdmVNb2R1bGVzIl0sInNvdXJjZXMiOlsiZGVjb3JhdGVNYXBDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdvb2dsZU1hcElzSW5zdGFsbGVkID0gZXhwb3J0cy5jcmVhdGVOb3RTdXBwb3J0ZWRDb21wb25lbnQgPSBleHBvcnRzLmdldE5hdGl2ZU1hcE5hbWUgPSBleHBvcnRzLlByb3ZpZGVyQ29udGV4dCA9IGV4cG9ydHMuTk9UX1NVUFBPUlRFRCA9IGV4cG9ydHMuVVNFU19ERUZBVUxUX0lNUExFTUVOVEFUSU9OID0gZXhwb3J0cy5TVVBQT1JURUQgPSB2b2lkIDA7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgcmVhY3RfbmF0aXZlXzEgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuY29uc3QgUHJvdmlkZXJDb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL1Byb3ZpZGVyQ29uc3RhbnRzXCIpO1xuZXhwb3J0cy5TVVBQT1JURUQgPSAnU1VQUE9SVEVEJztcbmV4cG9ydHMuVVNFU19ERUZBVUxUX0lNUExFTUVOVEFUSU9OID0gJ1VTRVNfREVGQVVMVF9JTVBMRU1FTlRBVElPTic7XG5leHBvcnRzLk5PVF9TVVBQT1JURUQgPSAnTk9UX1NVUFBPUlRFRCc7XG5leHBvcnRzLlByb3ZpZGVyQ29udGV4dCA9ICgwLCByZWFjdF8xLmNyZWF0ZUNvbnRleHQpKHVuZGVmaW5lZCk7XG5mdW5jdGlvbiBnZXROYXRpdmVNYXBOYW1lKHByb3ZpZGVyKSB7XG4gICAgaWYgKHJlYWN0X25hdGl2ZV8xLlBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgICAgcmV0dXJuICdBSVJNYXAnO1xuICAgIH1cbiAgICBpZiAocHJvdmlkZXIgPT09IFByb3ZpZGVyQ29uc3RhbnRzXzEuUFJPVklERVJfR09PR0xFKSB7XG4gICAgICAgIHJldHVybiAnQUlSR29vZ2xlTWFwJztcbiAgICB9XG4gICAgcmV0dXJuICdBSVJNYXAnO1xufVxuZXhwb3J0cy5nZXROYXRpdmVNYXBOYW1lID0gZ2V0TmF0aXZlTWFwTmFtZTtcbmZ1bmN0aW9uIGdldE5hdGl2ZUNvbXBvbmVudE5hbWUocHJvdmlkZXIsIGNvbXBvbmVudCkge1xuICAgIHJldHVybiBgJHtnZXROYXRpdmVNYXBOYW1lKHByb3ZpZGVyKX0ke2NvbXBvbmVudH1gO1xufVxuY29uc3QgY3JlYXRlTm90U3VwcG9ydGVkQ29tcG9uZW50ID0gKG1lc3NhZ2UpID0+ICgpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIHJldHVybiBudWxsO1xufTtcbmV4cG9ydHMuY3JlYXRlTm90U3VwcG9ydGVkQ29tcG9uZW50ID0gY3JlYXRlTm90U3VwcG9ydGVkQ29tcG9uZW50O1xuZXhwb3J0cy5nb29nbGVNYXBJc0luc3RhbGxlZCA9ICEhcmVhY3RfbmF0aXZlXzEuVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKGdldE5hdGl2ZU1hcE5hbWUoUHJvdmlkZXJDb25zdGFudHNfMS5QUk9WSURFUl9HT09HTEUpKTtcbmZ1bmN0aW9uIGRlY29yYXRlTWFwQ29tcG9uZW50KENvbXBvbmVudCwgY29tcG9uZW50TmFtZSwgcHJvdmlkZXJzKSB7XG4gICAgY29uc3QgY29tcG9uZW50cyA9IHt9O1xuICAgIGNvbnN0IGdldERlZmF1bHRDb21wb25lbnQgPSAoKSA9PiAoMCwgcmVhY3RfbmF0aXZlXzEucmVxdWlyZU5hdGl2ZUNvbXBvbmVudCkoZ2V0TmF0aXZlQ29tcG9uZW50TmFtZSh1bmRlZmluZWQsIGNvbXBvbmVudE5hbWUpKTtcbiAgICBDb21wb25lbnQuY29udGV4dFR5cGUgPSBleHBvcnRzLlByb3ZpZGVyQ29udGV4dDtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmdldE5hdGl2ZUNvbXBvbmVudCA9XG4gICAgICAgIGZ1bmN0aW9uIGdldE5hdGl2ZUNvbXBvbmVudCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5jb250ZXh0O1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvdmlkZXIgfHwgJ2RlZmF1bHQnO1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudHNba2V5XSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvdmlkZXIgPT09IFByb3ZpZGVyQ29uc3RhbnRzXzEuUFJPVklERVJfREVGQVVMVCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHNba2V5XSA9IGdldERlZmF1bHRDb21wb25lbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50c1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJJbmZvID0gcHJvdmlkZXJzW3Byb3ZpZGVyXTtcbiAgICAgICAgICAgIC8vIHF1aWNrIGZpeC4gUHJldmlvdXMgY29kZSBhc3N1bWVkIGFuZHJvaWQgfCBpb3NcbiAgICAgICAgICAgIGlmIChyZWFjdF9uYXRpdmVfMS5QbGF0Zm9ybS5PUyAhPT0gJ2FuZHJvaWQnICYmIHJlYWN0X25hdGl2ZV8xLlBsYXRmb3JtLk9TICE9PSAnaW9zJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVhY3QtbmF0aXZlLW1hcHMgZG9lc24ndCBzdXBwb3J0ICR7cmVhY3RfbmF0aXZlXzEuUGxhdGZvcm0uT1N9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwbGF0Zm9ybVN1cHBvcnQgPSBwcm92aWRlckluZm9bcmVhY3RfbmF0aXZlXzEuUGxhdGZvcm0uT1NdO1xuICAgICAgICAgICAgY29uc3QgbmF0aXZlQ29tcG9uZW50TmFtZSA9IGdldE5hdGl2ZUNvbXBvbmVudE5hbWUocHJvdmlkZXIsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgICAgaWYgKHBsYXRmb3JtU3VwcG9ydCA9PT0gZXhwb3J0cy5OT1RfU1VQUE9SVEVEKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50c1trZXldID0gKDAsIGV4cG9ydHMuY3JlYXRlTm90U3VwcG9ydGVkQ29tcG9uZW50KShgcmVhY3QtbmF0aXZlLW1hcHM6ICR7bmF0aXZlQ29tcG9uZW50TmFtZX0gaXMgbm90IHN1cHBvcnRlZCBvbiAke3JlYWN0X25hdGl2ZV8xLlBsYXRmb3JtLk9TfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGxhdGZvcm1TdXBwb3J0ID09PSBleHBvcnRzLlNVUFBPUlRFRCkge1xuICAgICAgICAgICAgICAgIGlmIChwcm92aWRlciAhPT0gUHJvdmlkZXJDb25zdGFudHNfMS5QUk9WSURFUl9HT09HTEUgfHxcbiAgICAgICAgICAgICAgICAgICAgKHJlYWN0X25hdGl2ZV8xLlBsYXRmb3JtLk9TID09PSAnaW9zJyAmJiBleHBvcnRzLmdvb2dsZU1hcElzSW5zdGFsbGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzW2tleV0gPSAoMCwgcmVhY3RfbmF0aXZlXzEucmVxdWlyZU5hdGl2ZUNvbXBvbmVudCkobmF0aXZlQ29tcG9uZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gKHBsYXRmb3JtU3VwcG9ydCA9PT0gVVNFU19ERUZBVUxUX0lNUExFTUVOVEFUSU9OKVxuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50cy5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuZGVmYXVsdCA9IGdldERlZmF1bHRDb21wb25lbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcG9uZW50c1trZXldID0gY29tcG9uZW50cy5kZWZhdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNba2V5XTtcbiAgICAgICAgfTtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLmdldFVJTWFuYWdlckNvbW1hbmQgPSBmdW5jdGlvbiBnZXRVSU1hbmFnZXJDb21tYW5kKG5hbWUpIHtcbiAgICAgICAgY29uc3QgbmF0aXZlQ29tcG9uZW50TmFtZSA9IGdldE5hdGl2ZUNvbXBvbmVudE5hbWUodGhpcy5jb250ZXh0LCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIHJlYWN0X25hdGl2ZV8xLlVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZyhuYXRpdmVDb21wb25lbnROYW1lKS5Db21tYW5kc1tuYW1lXTtcbiAgICB9O1xuICAgIENvbXBvbmVudC5wcm90b3R5cGUuZ2V0TWFwTWFuYWdlckNvbW1hbmQgPSBmdW5jdGlvbiBnZXRNYXBNYW5hZ2VyQ29tbWFuZChuYW1lKSB7XG4gICAgICAgIGNvbnN0IG5hdGl2ZUNvbXBvbmVudE5hbWUgPSBgJHtnZXROYXRpdmVDb21wb25lbnROYW1lKHRoaXMuY29udGV4dCwgY29tcG9uZW50TmFtZSl9TWFuYWdlcmA7XG4gICAgICAgIHJldHVybiByZWFjdF9uYXRpdmVfMS5OYXRpdmVNb2R1bGVzW25hdGl2ZUNvbXBvbmVudE5hbWVdW25hbWVdO1xuICAgIH07XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlY29yYXRlTWFwQ29tcG9uZW50O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0Usb0JBQW9CLEdBQUdGLE9BQU8sQ0FBQ0csMkJBQTJCLEdBQUdILE9BQU8sQ0FBQ0ksZ0JBQWdCLEdBQUdKLE9BQU8sQ0FBQ0ssZUFBZSxHQUFHTCxPQUFPLENBQUNNLGFBQWEsR0FBR04sT0FBTyxDQUFDTywyQkFBMkIsR0FBR1AsT0FBTyxDQUFDUSxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ2xOLElBQU1DLE9BQU8sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUNoQyxJQUFNQyxj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