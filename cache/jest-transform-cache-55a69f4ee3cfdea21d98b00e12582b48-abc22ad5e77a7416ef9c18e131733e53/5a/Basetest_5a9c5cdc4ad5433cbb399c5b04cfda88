913e96719a5afcbb43fc13e37e774d8c
_getJestObj().mock('react-redux', function () {
  return {
    useDispatch: jest.fn()
  };
});
_getJestObj().mock('react-native-geolocation-service', function () {
  return {
    getCurrentPosition: jest.fn(function (success) {
      var location = {
        coords: {
          latitude: 17.3920466,
          longitude: 78.4758037
        }
      };
      success(location);
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Base = _interopRequireDefault(require("../Base"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNativeGeolocationService = _interopRequireDefault(require("react-native-geolocation-service"));
var _reactRedux = require("react-redux");
var _native = require("@react-navigation/native");
require("@testing-library/jest-dom");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var timestamp = new Date(Date.now()).toLocaleString([], {
  year: 'numeric',
  month: 'numeric',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
var navigation = (0, _native.useNavigation)();
describe('Locations List Screen/Base Component', function () {
  var latitude;
  var longitude;
  var mockDispatch = jest.fn();
  var useDispatchMock;
  var fetchMock = jest.fn();
  global.fetch = fetchMock;
  beforeAll((0, _asyncToGenerator2.default)(function* () {
    yield new Promise(function (resolve) {
      _reactNativeGeolocationService.default.getCurrentPosition(function (position) {
        latitude = position.coords.latitude;
        longitude = position.coords.longitude;
        resolve();
      });
    });
  }));
  var mockResponse = {
    results: [{
      formatted: '123 Main St, Anytown USA'
    }]
  };
  global.fetch = jest.fn().mockResolvedValue({
    json: function json() {
      return Promise.resolve(mockResponse);
    }
  });
  beforeEach(function () {
    fetchMock.mockReset();
    useDispatchMock = _reactRedux.useDispatch;
    useDispatchMock.mockReturnValue(mockDispatch);
  });
  it('renders the base component correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    var currentLabel = _reactNative.screen.getByTestId('list-current-label');
    expect(currentLabel.props.children).toBe('Current Location');
  });
  it('should have the right location', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    expect(_reactNativeGeolocationService.default.getCurrentPosition).toHaveBeenCalled();
  });
  it('renders the current location time', (0, _asyncToGenerator2.default)(function* () {
    var currentLocation = {
      address: 'unnamed road',
      time: timestamp,
      latitude: 42.123456,
      longitude: -71.123456
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render.getByTestId;
    var currentLocationTime = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-current-time');
    });
    expect(currentLocationTime.props.children).toBe(currentLocation.time);
  }));
  test('displays current location', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      results: [{
        formatted: '123 Main St, Anytown USA'
      }]
    };
    global.fetch = jest.fn().mockResolvedValue({
      json: function json() {
        return Promise.resolve(mockResponse);
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var currentLocationName = getByTestId('list-current-name');
      expect(currentLocationName.props.children).toBe('123 Main St, Anytown USA');
    });
  }));
  it('clears all locations on button press', (0, _asyncToGenerator2.default)(function* () {
    var clearAllLocations = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactNative2.Button, {
        title: "Clear All Locations",
        onPress: clearAllLocations,
        testID: "list-clear-all-button"
      })),
      getByTestId = _render3.getByTestId;
    var clearAllButton = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-clear-all-button');
    });
    _reactNative.fireEvent.press(clearAllButton);
    expect(clearAllLocations).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,