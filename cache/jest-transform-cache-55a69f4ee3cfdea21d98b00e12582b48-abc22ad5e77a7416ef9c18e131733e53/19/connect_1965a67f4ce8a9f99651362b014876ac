7ac83132870ca39552a7f87e7e02351b
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = exports.initializeConnect = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));
var _react = _interopRequireWildcard(require("react"));
var _reactIs = require("react-is");
var _selectorFactory = _interopRequireDefault(require("../connect/selectorFactory"));
var _mapDispatchToProps = require("../connect/mapDispatchToProps");
var _mapStateToProps = require("../connect/mapStateToProps");
var _mergeProps = require("../connect/mergeProps");
var _Subscription = require("../utils/Subscription");
var _useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");
var _shallowEqual = _interopRequireDefault(require("../utils/shallowEqual"));
var _warning = _interopRequireDefault(require("../utils/warning"));
var _Context = require("./Context");
var _useSyncExternalStore = require("../utils/useSyncExternalStore");
var _excluded = ["reactReduxForwardedRef"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var useSyncExternalStore = _useSyncExternalStore.notInitialized;
var initializeConnect = function initializeConnect(fn) {
  useSyncExternalStore = fn;
};
exports.initializeConnect = initializeConnect;
var EMPTY_ARRAY = [null, 0];
var NO_SUBSCRIPTION_ARRAY = [null, null];
var stringifyComponent = function stringifyComponent(Comp) {
  try {
    return JSON.stringify(Comp);
  } catch (err) {
    return String(Comp);
  }
};
function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    return effectFunc.apply(void 0, (0, _toConsumableArray2.default)(effectArgs));
  }, dependencies);
}
function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs) {
  lastWrapperProps.current = wrapperProps;
  renderIsScheduled.current = false;
  if (childPropsFromStoreUpdate.current) {
    childPropsFromStoreUpdate.current = null;
    notifyNestedSubs();
  }
}
function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, additionalSubscribeListener) {
  if (!shouldHandleStateChanges) return function () {};
  var didUnsubscribe = false;
  var lastThrownError = null;
  var checkForUpdates = function checkForUpdates() {
    if (didUnsubscribe || !isMounted.current) {
      return;
    }
    var latestStoreState = store.getState();
    var newChildProps, error;
    try {
      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
    } catch (e) {
      error = e;
      lastThrownError = e;
    }
    if (!error) {
      lastThrownError = null;
    }
    if (newChildProps === lastChildProps.current) {
      if (!renderIsScheduled.current) {
        notifyNestedSubs();
      }
    } else {
      lastChildProps.current = newChildProps;
      childPropsFromStoreUpdate.current = newChildProps;
      renderIsScheduled.current = true;
      additionalSubscribeListener();
    }
  };
  subscription.onStateChange = checkForUpdates;
  subscription.trySubscribe();
  checkForUpdates();
  var unsubscribeWrapper = function unsubscribeWrapper() {
    didUnsubscribe = true;
    subscription.tryUnsubscribe();
    subscription.onStateChange = null;
    if (lastThrownError) {
      throw lastThrownError;
    }
  };
  return unsubscribeWrapper;
}
var initStateUpdates = function initStateUpdates() {
  return EMPTY_ARRAY;
};
function strictEqual(a, b) {
  return a === b;
}
var hasWarnedAboutDeprecatedPureOption = false;
function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
    pure = _ref.pure,
    _ref$areStatesEqual = _ref.areStatesEqual,
    areStatesEqual = _ref$areStatesEqual === void 0 ? strictEqual : _ref$areStatesEqual,
    _ref$areOwnPropsEqual = _ref.areOwnPropsEqual,
    areOwnPropsEqual = _ref$areOwnPropsEqual === void 0 ? _shallowEqual.default : _ref$areOwnPropsEqual,
    _ref$areStatePropsEqu = _ref.areStatePropsEqual,
    areStatePropsEqual = _ref$areStatePropsEqu === void 0 ? _shallowEqual.default : _ref$areStatePropsEqu,
    _ref$areMergedPropsEq = _ref.areMergedPropsEqual,
    areMergedPropsEqual = _ref$areMergedPropsEq === void 0 ? _shallowEqual.default : _ref$areMergedPropsEq,
    _ref$forwardRef = _ref.forwardRef,
    forwardRef = _ref$forwardRef === void 0 ? false : _ref$forwardRef,
    _ref$context = _ref.context,
    context = _ref$context === void 0 ? _Context.ReactReduxContext : _ref$context;
  if (process.env.NODE_ENV !== 'production') {
    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {
      hasWarnedAboutDeprecatedPureOption = true;
      (0, _warning.default)('The `pure` option has been removed. `connect` is now always a "pure/memoized" component');
    }
  }
  var Context = context;
  var initMapStateToProps = (0, _mapStateToProps.mapStateToPropsFactory)(mapStateToProps);
  var initMapDispatchToProps = (0, _mapDispatchToProps.mapDispatchToPropsFactory)(mapDispatchToProps);
  var initMergeProps = (0, _mergeProps.mergePropsFactory)(mergeProps);
  var shouldHandleStateChanges = Boolean(mapStateToProps);
  var wrapWithConnect = function wrapWithConnect(WrappedComponent) {
    if (process.env.NODE_ENV !== 'production' && !(0, _reactIs.isValidElementType)(WrappedComponent)) {
      throw new Error("You must pass a component to the function returned by connect. Instead received " + stringifyComponent(WrappedComponent));
    }
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    var displayName = "Connect(" + wrappedComponentName + ")";
    var selectorFactoryOptions = {
      shouldHandleStateChanges: shouldHandleStateChanges,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent,
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      areStatesEqual: areStatesEqual,
      areStatePropsEqual: areStatePropsEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areMergedPropsEqual: areMergedPropsEqual
    };
    function ConnectFunction(props) {
      var _ref2 = (0, _react.useMemo)(function () {
          var reactReduxForwardedRef = props.reactReduxForwardedRef,
            wrapperProps = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
          return [props.context, reactReduxForwardedRef, wrapperProps];
        }, [props]),
        _ref3 = (0, _slicedToArray2.default)(_ref2, 3),
        propsContext = _ref3[0],
        reactReduxForwardedRef = _ref3[1],
        wrapperProps = _ref3[2];
      var ContextToUse = (0, _react.useMemo)(function () {
        return propsContext && propsContext.Consumer && (0, _reactIs.isContextConsumer)(_react.default.createElement(propsContext.Consumer, null)) ? propsContext : Context;
      }, [propsContext, Context]);
      var contextValue = (0, _react.useContext)(ContextToUse);
      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
      if (process.env.NODE_ENV !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {
        throw new Error("Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
      }
      var store = didStoreComeFromProps ? props.store : contextValue.store;
      var getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;
      var childPropsSelector = (0, _react.useMemo)(function () {
        return (0, _selectorFactory.default)(store.dispatch, selectorFactoryOptions);
      }, [store]);
      var _ref4 = (0, _react.useMemo)(function () {
          if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;
          var subscription = (0, _Subscription.createSubscription)(store, didStoreComeFromProps ? undefined : contextValue.subscription);
          var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);
          return [subscription, notifyNestedSubs];
        }, [store, didStoreComeFromProps, contextValue]),
        _ref5 = (0, _slicedToArray2.default)(_ref4, 2),
        subscription = _ref5[0],
        notifyNestedSubs = _ref5[1];
      var overriddenContextValue = (0, _react.useMemo)(function () {
        if (didStoreComeFromProps) {
          return contextValue;
        }
        return (0, _extends2.default)({}, contextValue, {
          subscription: subscription
        });
      }, [didStoreComeFromProps, contextValue, subscription]);
      var lastChildProps = (0, _react.useRef)();
      var lastWrapperProps = (0, _react.useRef)(wrapperProps);
      var childPropsFromStoreUpdate = (0, _react.useRef)();
      var renderIsScheduled = (0, _react.useRef)(false);
      var isProcessingDispatch = (0, _react.useRef)(false);
      var isMounted = (0, _react.useRef)(false);
      var latestSubscriptionCallbackError = (0, _react.useRef)();
      (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
        isMounted.current = true;
        return function () {
          isMounted.current = false;
        };
      }, []);
      var actualChildPropsSelector = (0, _react.useMemo)(function () {
        var selector = function selector() {
          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
            return childPropsFromStoreUpdate.current;
          }
          return childPropsSelector(store.getState(), wrapperProps);
        };
        return selector;
      }, [store, wrapperProps]);
      var subscribeForReact = (0, _react.useMemo)(function () {
        var subscribe = function subscribe(reactListener) {
          if (!subscription) {
            return function () {};
          }
          return subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);
        };
        return subscribe;
      }, [subscription]);
      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);
      var actualChildProps;
      try {
        actualChildProps = useSyncExternalStore(subscribeForReact, actualChildPropsSelector, getServerState ? function () {
          return childPropsSelector(getServerState(), wrapperProps);
        } : actualChildPropsSelector);
      } catch (err) {
        if (latestSubscriptionCallbackError.current) {
          ;
          err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
        }
        throw err;
      }
      (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
        latestSubscriptionCallbackError.current = undefined;
        childPropsFromStoreUpdate.current = undefined;
        lastChildProps.current = actualChildProps;
      });
      var renderedWrappedComponent = (0, _react.useMemo)(function () {
        return _react.default.createElement(WrappedComponent, (0, _extends2.default)({}, actualChildProps, {
          ref: reactReduxForwardedRef
        }));
      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
      var renderedChild = (0, _react.useMemo)(function () {
        if (shouldHandleStateChanges) {
          return _react.default.createElement(ContextToUse.Provider, {
            value: overriddenContextValue
          }, renderedWrappedComponent);
        }
        return renderedWrappedComponent;
      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
      return renderedChild;
    }
    var _Connect = _react.default.memo(ConnectFunction);
    var Connect = _Connect;
    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = ConnectFunction.displayName = displayName;
    if (forwardRef) {
      var _forwarded = _react.default.forwardRef(function forwardConnectRef(props, ref) {
        return _react.default.createElement(Connect, (0, _extends2.default)({}, props, {
          reactReduxForwardedRef: ref
        }));
      });
      var forwarded = _forwarded;
      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return (0, _hoistNonReactStatics.default)(forwarded, WrappedComponent);
    }
    return (0, _hoistNonReactStatics.default)(Connect, WrappedComponent);
  };
  return wrapWithConnect;
}
var _default = connect;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MiIsInJlcXVpcmUiLCJfc2xpY2VkVG9BcnJheTIiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImluaXRpYWxpemVDb25uZWN0IiwiX2V4dGVuZHMyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyIiwiX2hvaXN0Tm9uUmVhY3RTdGF0aWNzIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3RJcyIsIl9zZWxlY3RvckZhY3RvcnkiLCJfbWFwRGlzcGF0Y2hUb1Byb3BzIiwiX21hcFN0YXRlVG9Qcm9wcyIsIl9tZXJnZVByb3BzIiwiX1N1YnNjcmlwdGlvbiIsIl91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiX3NoYWxsb3dFcXVhbCIsIl93YXJuaW5nIiwiX0NvbnRleHQiLCJfdXNlU3luY0V4dGVybmFsU3RvcmUiLCJfZXhjbHVkZWQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwibm90SW5pdGlhbGl6ZWQiLCJmbiIsIkVNUFRZX0FSUkFZIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwic3RyaW5naWZ5Q29tcG9uZW50IiwiQ29tcCIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnIiLCJTdHJpbmciLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MiLCJlZmZlY3RGdW5jIiwiZWZmZWN0QXJncyIsImRlcGVuZGVuY2llcyIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJhcHBseSIsImNhcHR1cmVXcmFwcGVyUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwibGFzdENoaWxkUHJvcHMiLCJyZW5kZXJJc1NjaGVkdWxlZCIsIndyYXBwZXJQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJub3RpZnlOZXN0ZWRTdWJzIiwiY3VycmVudCIsInN1YnNjcmliZVVwZGF0ZXMiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJzdG9yZSIsInN1YnNjcmlwdGlvbiIsImNoaWxkUHJvcHNTZWxlY3RvciIsImlzTW91bnRlZCIsImFkZGl0aW9uYWxTdWJzY3JpYmVMaXN0ZW5lciIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibGF0ZXN0U3RvcmVTdGF0ZSIsImdldFN0YXRlIiwibmV3Q2hpbGRQcm9wcyIsImVycm9yIiwiZSIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlTdWJzY3JpYmUiLCJ1bnN1YnNjcmliZVdyYXBwZXIiLCJ0cnlVbnN1YnNjcmliZSIsImluaXRTdGF0ZVVwZGF0ZXMiLCJzdHJpY3RFcXVhbCIsImEiLCJiIiwiaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbiIsImNvbm5lY3QiLCJtYXBTdGF0ZVRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJtZXJnZVByb3BzIiwiX3JlZiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInB1cmUiLCJfcmVmJGFyZVN0YXRlc0VxdWFsIiwiYXJlU3RhdGVzRXF1YWwiLCJfcmVmJGFyZU93blByb3BzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiX3JlZiRhcmVTdGF0ZVByb3BzRXF1IiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiX3JlZiRhcmVNZXJnZWRQcm9wc0VxIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsIl9yZWYkZm9yd2FyZFJlZiIsImZvcndhcmRSZWYiLCJfcmVmJGNvbnRleHQiLCJjb250ZXh0IiwiUmVhY3RSZWR1eENvbnRleHQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJDb250ZXh0IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeSIsImluaXRNZXJnZVByb3BzIiwibWVyZ2VQcm9wc0ZhY3RvcnkiLCJCb29sZWFuIiwid3JhcFdpdGhDb25uZWN0IiwiV3JhcHBlZENvbXBvbmVudCIsImlzVmFsaWRFbGVtZW50VHlwZSIsIkVycm9yIiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdEZ1bmN0aW9uIiwicHJvcHMiLCJfcmVmMiIsInVzZU1lbW8iLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwiX3JlZjMiLCJwcm9wc0NvbnRleHQiLCJDb250ZXh0VG9Vc2UiLCJDb25zdW1lciIsImlzQ29udGV4dENvbnN1bWVyIiwiY3JlYXRlRWxlbWVudCIsImNvbnRleHRWYWx1ZSIsInVzZUNvbnRleHQiLCJkaWRTdG9yZUNvbWVGcm9tUHJvcHMiLCJkaXNwYXRjaCIsImRpZFN0b3JlQ29tZUZyb21Db250ZXh0IiwiZ2V0U2VydmVyU3RhdGUiLCJfcmVmNCIsImNyZWF0ZVN1YnNjcmlwdGlvbiIsImJpbmQiLCJfcmVmNSIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJ1c2VSZWYiLCJpc1Byb2Nlc3NpbmdEaXNwYXRjaCIsImxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IiLCJhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IiLCJzZWxlY3RvciIsInN1YnNjcmliZUZvclJlYWN0Iiwic3Vic2NyaWJlIiwicmVhY3RMaXN0ZW5lciIsImFjdHVhbENoaWxkUHJvcHMiLCJtZXNzYWdlIiwic3RhY2siLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJyZWYiLCJyZW5kZXJlZENoaWxkIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIl9Db25uZWN0IiwibWVtbyIsIkNvbm5lY3QiLCJfZm9yd2FyZGVkIiwiZm9yd2FyZENvbm5lY3RSZWYiLCJmb3J3YXJkZWQiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbImNvbm5lY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5pbml0aWFsaXplQ29ubmVjdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdElzID0gcmVxdWlyZShcInJlYWN0LWlzXCIpO1xuXG52YXIgX3NlbGVjdG9yRmFjdG9yeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5XCIpKTtcblxudmFyIF9tYXBEaXNwYXRjaFRvUHJvcHMgPSByZXF1aXJlKFwiLi4vY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHNcIik7XG5cbnZhciBfbWFwU3RhdGVUb1Byb3BzID0gcmVxdWlyZShcIi4uL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzXCIpO1xuXG52YXIgX21lcmdlUHJvcHMgPSByZXF1aXJlKFwiLi4vY29ubmVjdC9tZXJnZVByb3BzXCIpO1xuXG52YXIgX1N1YnNjcmlwdGlvbiA9IHJlcXVpcmUoXCIuLi91dGlscy9TdWJzY3JpcHRpb25cIik7XG5cbnZhciBfdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHJlcXVpcmUoXCIuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0XCIpO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3NoYWxsb3dFcXVhbFwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3dhcm5pbmdcIikpO1xuXG52YXIgX0NvbnRleHQgPSByZXF1aXJlKFwiLi9Db250ZXh0XCIpO1xuXG52YXIgX3VzZVN5bmNFeHRlcm5hbFN0b3JlID0gcmVxdWlyZShcIi4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlXCIpO1xuXG5jb25zdCBfZXhjbHVkZWQgPSBbXCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXCJdO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5sZXQgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBfdXNlU3luY0V4dGVybmFsU3RvcmUubm90SW5pdGlhbGl6ZWQ7XG5cbmNvbnN0IGluaXRpYWxpemVDb25uZWN0ID0gZm4gPT4ge1xuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IGZuO1xufTsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxuXG5leHBvcnRzLmluaXRpYWxpemVDb25uZWN0ID0gaW5pdGlhbGl6ZUNvbm5lY3Q7XG5jb25zdCBFTVBUWV9BUlJBWSA9IFtudWxsLCAwXTtcbmNvbnN0IE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTsgLy8gQXR0ZW1wdHMgdG8gc3RyaW5naWZ5IHdoYXRldmVyIG5vdC1yZWFsbHktYS1jb21wb25lbnQgdmFsdWUgd2Ugd2VyZSBnaXZlblxuLy8gZm9yIGxvZ2dpbmcgaW4gYW4gZXJyb3IgbWVzc2FnZVxuXG5jb25zdCBzdHJpbmdpZnlDb21wb25lbnQgPSBDb21wID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbi8vIFRoaXMgaXMgXCJqdXN0XCIgYSBgdXNlTGF5b3V0RWZmZWN0YCwgYnV0IHdpdGggdHdvIG1vZGlmaWNhdGlvbnM6XG4vLyAtIHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIGB1c2VFZmZlY3RgIGluIFNTUiB0byBhdm9pZCBhbm5veWluZyB3YXJuaW5nc1xuLy8gLSB3ZSBleHRyYWN0IHRoaXMgdG8gYSBzZXBhcmF0ZSBmdW5jdGlvbiB0byBhdm9pZCBjbG9zaW5nIG92ZXIgdmFsdWVzXG4vLyAgIGFuZCBjYXVzaW5nIG1lbW9yeSBsZWFrc1xuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGVmZmVjdEZ1bmMsIGVmZmVjdEFyZ3MsIGRlcGVuZGVuY2llcykge1xuICAoMCwgX3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QudXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCkoKCkgPT4gZWZmZWN0RnVuYyguLi5lZmZlY3RBcmdzKSwgZGVwZW5kZW5jaWVzKTtcbn0gLy8gRWZmZWN0IGNhbGxiYWNrLCBleHRyYWN0ZWQ6IGFzc2lnbiB0aGUgbGF0ZXN0IHByb3BzIHZhbHVlcyB0byByZWZzIGZvciBsYXRlciB1c2FnZVxuXG5cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIC8vIGFjdHVhbENoaWxkUHJvcHM6IHVua25vd24sXG5jaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzKSB7XG4gIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH1cbn0gLy8gRWZmZWN0IGNhbGxiYWNrLCBleHRyYWN0ZWQ6IHN1YnNjcmliZSB0byB0aGUgUmVkdXggc3RvcmUgb3IgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IsXG4vLyBjaGVjayBmb3IgdXBkYXRlcyBhZnRlciBkaXNwYXRjaGVkIGFjdGlvbnMsIGFuZCB0cmlnZ2VyIHJlLXJlbmRlcnMuXG5cblxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBpc01vdW50ZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIC8vIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2g6IFJlYWN0LkRpc3BhdGNoPGFueT4sXG5hZGRpdGlvbmFsU3Vic2NyaWJlTGlzdGVuZXIpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiAoKSA9PiB7fTsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgbGV0IGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIGxldCBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgY29uc3QgY2hlY2tGb3JVcGRhdGVzID0gKCkgPT4ge1xuICAgIGlmIChkaWRVbnN1YnNjcmliZSB8fCAhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUT0RPIFdlJ3JlIGN1cnJlbnRseSBjYWxsaW5nIGdldFN0YXRlIG91cnNlbHZlcyBoZXJlLCByYXRoZXIgdGhhbiBsZXR0aW5nIGB1U0VTYCBkbyBpdFxuXG5cbiAgICBjb25zdCBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBsZXQgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZTtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIFRPRE8gVGhpcyBpcyBoYWNreSBhbmQgbm90IGhvdyBgdVNFU2AgaXMgbWVhbnQgdG8gYmUgdXNlZFxuICAgICAgLy8gVHJpZ2dlciB0aGUgUmVhY3QgYHVzZVN5bmNFeHRlcm5hbFN0b3JlYCBzdWJzY3JpYmVyXG5cbiAgICAgIGFkZGl0aW9uYWxTdWJzY3JpYmVMaXN0ZW5lcigpO1xuICAgIH1cbiAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlV3JhcHBlciA9ICgpID0+IHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufSAvLyBSZWR1Y2VyIGluaXRpYWwgc3RhdGUgY3JlYXRpb24gZm9yIG91ciB1cGRhdGUgcmVkdWNlclxuXG5cbmNvbnN0IGluaXRTdGF0ZVVwZGF0ZXMgPSAoKSA9PiBFTVBUWV9BUlJBWTtcblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cbi8qKlxyXG4gKiBJbmZlcnMgdGhlIHR5cGUgb2YgcHJvcHMgdGhhdCBhIGNvbm5lY3RvciB3aWxsIGluamVjdCBpbnRvIGEgY29tcG9uZW50LlxyXG4gKi9cblxuXG5sZXQgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbiA9IGZhbHNlO1xuLyoqXHJcbiAqIENvbm5lY3RzIGEgUmVhY3QgY29tcG9uZW50IHRvIGEgUmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIC0gV2l0aG91dCBhcmd1bWVudHMsIGp1c3Qgd3JhcHMgdGhlIGNvbXBvbmVudCwgd2l0aG91dCBjaGFuZ2luZyB0aGUgYmVoYXZpb3IgLyBwcm9wc1xyXG4gKlxyXG4gKiAtIElmIDIgcGFyYW1zIGFyZSBwYXNzZWQgKDNyZCBwYXJhbSwgbWVyZ2VQcm9wcywgaXMgc2tpcHBlZCksIGRlZmF1bHQgYmVoYXZpb3JcclxuICogaXMgdG8gb3ZlcnJpZGUgb3duUHJvcHMgKGFzIHN0YXRlZCBpbiB0aGUgZG9jcyksIHNvIHdoYXQgcmVtYWlucyBpcyBldmVyeXRoaW5nIHRoYXQnc1xyXG4gKiBub3QgYSBzdGF0ZSBvciBkaXNwYXRjaCBwcm9wXHJcbiAqXHJcbiAqIC0gV2hlbiAzcmQgcGFyYW0gaXMgcGFzc2VkLCB3ZSBkb24ndCBrbm93IGlmIG93blByb3BzIHByb3BhZ2F0ZSBhbmQgd2hldGhlciB0aGV5XHJcbiAqIHNob3VsZCBiZSB2YWxpZCBjb21wb25lbnQgcHJvcHMsIGJlY2F1c2UgaXQgZGVwZW5kcyBvbiBtZXJnZVByb3BzIGltcGxlbWVudGF0aW9uLlxyXG4gKiBBcyBzdWNoLCBpdCBpcyB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvIGV4dGVuZCBvd25Qcm9wcyBpbnRlcmZhY2UgZnJvbSBzdGF0ZSBvclxyXG4gKiBkaXNwYXRjaCBwcm9wcyBvciBib3RoIHdoZW4gYXBwbGljYWJsZVxyXG4gKlxyXG4gKiBAcGFyYW0gbWFwU3RhdGVUb1Byb3BzIEEgZnVuY3Rpb24gdGhhdCBleHRyYWN0cyB2YWx1ZXMgZnJvbSBzdGF0ZVxyXG4gKiBAcGFyYW0gbWFwRGlzcGF0Y2hUb1Byb3BzIFNldHVwIGZvciBkaXNwYXRjaGluZyBhY3Rpb25zXHJcbiAqIEBwYXJhbSBtZXJnZVByb3BzIE9wdGlvbmFsIGNhbGxiYWNrIHRvIG1lcmdlIHN0YXRlIGFuZCBkaXNwYXRjaCBwcm9wcyB0b2dldGhlclxyXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgY29ubmVjdGlvblxyXG4gKlxyXG4gKi9cblxuZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywge1xuICAvLyBUaGUgYHB1cmVgIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLCBzbyBUUyBkb2Vzbid0IGxpa2UgdXMgZGVzdHJ1Y3R1cmluZyB0aGlzIHRvIGNoZWNrIGl0cyBleGlzdGVuY2UuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVyZSxcbiAgYXJlU3RhdGVzRXF1YWwgPSBzdHJpY3RFcXVhbCxcbiAgYXJlT3duUHJvcHNFcXVhbCA9IF9zaGFsbG93RXF1YWwuZGVmYXVsdCxcbiAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3NoYWxsb3dFcXVhbC5kZWZhdWx0LFxuICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3NoYWxsb3dFcXVhbC5kZWZhdWx0LFxuICAvLyB1c2UgUmVhY3QncyBmb3J3YXJkUmVmIHRvIGV4cG9zZSBhIHJlZiBvZiB0aGUgd3JhcHBlZCBjb21wb25lbnRcbiAgZm9yd2FyZFJlZiA9IGZhbHNlLFxuICAvLyB0aGUgY29udGV4dCBjb25zdW1lciB0byB1c2VcbiAgY29udGV4dCA9IF9Db250ZXh0LlJlYWN0UmVkdXhDb250ZXh0XG59ID0ge30pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocHVyZSAhPT0gdW5kZWZpbmVkICYmICFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uKSB7XG4gICAgICBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uID0gdHJ1ZTtcbiAgICAgICgwLCBfd2FybmluZy5kZWZhdWx0KSgnVGhlIGBwdXJlYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gYGNvbm5lY3RgIGlzIG5vdyBhbHdheXMgYSBcInB1cmUvbWVtb2l6ZWRcIiBjb21wb25lbnQnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBDb250ZXh0ID0gY29udGV4dDtcbiAgY29uc3QgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9ICgwLCBfbWFwU3RhdGVUb1Byb3BzLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkpKG1hcFN0YXRlVG9Qcm9wcyk7XG4gIGNvbnN0IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSAoMCwgX21hcERpc3BhdGNoVG9Qcm9wcy5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3J5KShtYXBEaXNwYXRjaFRvUHJvcHMpO1xuICBjb25zdCBpbml0TWVyZ2VQcm9wcyA9ICgwLCBfbWVyZ2VQcm9wcy5tZXJnZVByb3BzRmFjdG9yeSkobWVyZ2VQcm9wcyk7XG4gIGNvbnN0IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKTtcblxuICBjb25zdCB3cmFwV2l0aENvbm5lY3QgPSBXcmFwcGVkQ29tcG9uZW50ID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhKDAsIF9yZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZSkoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgY29ubmVjdC4gSW5zdGVhZCByZWNlaXZlZCAke3N0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gYENvbm5lY3QoJHt3cmFwcGVkQ29tcG9uZW50TmFtZX0pYDtcbiAgICBjb25zdCBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0ge1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzLFxuICAgICAgYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIGNvbnN0IFtwcm9wc0NvbnRleHQsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc10gPSAoMCwgX3JlYWN0LnVzZU1lbW8pKCgpID0+IHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9ID0gcHJvcHMsXG4gICAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocHJvcHMsIF9leGNsdWRlZCk7XG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pO1xuICAgICAgY29uc3QgQ29udGV4dFRvVXNlID0gKDAsIF9yZWFjdC51c2VNZW1vKSgoKSA9PiB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgKDAsIF9yZWFjdElzLmlzQ29udGV4dENvbnN1bWVyKSggLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIGNvbnN0IGNvbnRleHRWYWx1ZSA9ICgwLCBfcmVhY3QudXNlQ29udGV4dCkoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG5cbiAgICAgIGNvbnN0IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZ2V0U3RhdGUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgY29uc3QgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIFwic3RvcmVcIiBpbiB0aGUgY29udGV4dCBvZiBgICsgYFwiJHtkaXNwbGF5TmFtZX1cIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgYCArIGBvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgYCArIGBSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvICR7ZGlzcGxheU5hbWV9IGluIGNvbm5lY3Qgb3B0aW9ucy5gKTtcbiAgICAgIH0gLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG5cblxuICAgICAgY29uc3Qgc3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBwcm9wcy5zdG9yZSA6IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIGNvbnN0IGdldFNlcnZlclN0YXRlID0gZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPyBjb250ZXh0VmFsdWUuZ2V0U2VydmVyU3RhdGUgOiBzdG9yZS5nZXRTdGF0ZTtcbiAgICAgIGNvbnN0IGNoaWxkUHJvcHNTZWxlY3RvciA9ICgwLCBfcmVhY3QudXNlTWVtbykoKCkgPT4ge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiAoMCwgX3NlbGVjdG9yRmFjdG9yeS5kZWZhdWx0KShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICB9LCBbc3RvcmVdKTtcbiAgICAgIGNvbnN0IFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdID0gKDAsIF9yZWFjdC51c2VNZW1vKSgoKSA9PiB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9ICgwLCBfU3Vic2NyaXB0aW9uLmNyZWF0ZVN1YnNjcmlwdGlvbikoc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHVuZGVmaW5lZCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIGNvbnN0IG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cbiAgICAgIGNvbnN0IG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSAoMCwgX3JlYWN0LnVzZU1lbW8pKCgpID0+IHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cbiAgICAgIGNvbnN0IGxhc3RDaGlsZFByb3BzID0gKDAsIF9yZWFjdC51c2VSZWYpKCk7XG4gICAgICBjb25zdCBsYXN0V3JhcHBlclByb3BzID0gKDAsIF9yZWFjdC51c2VSZWYpKHdyYXBwZXJQcm9wcyk7XG4gICAgICBjb25zdCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gKDAsIF9yZWFjdC51c2VSZWYpKCk7XG4gICAgICBjb25zdCByZW5kZXJJc1NjaGVkdWxlZCA9ICgwLCBfcmVhY3QudXNlUmVmKShmYWxzZSk7XG4gICAgICBjb25zdCBpc1Byb2Nlc3NpbmdEaXNwYXRjaCA9ICgwLCBfcmVhY3QudXNlUmVmKShmYWxzZSk7XG4gICAgICBjb25zdCBpc01vdW50ZWQgPSAoMCwgX3JlYWN0LnVzZVJlZikoZmFsc2UpO1xuICAgICAgY29uc3QgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9ICgwLCBfcmVhY3QudXNlUmVmKSgpO1xuICAgICAgKDAsIF91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LnVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QpKCgpID0+IHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICB9LCBbXSk7XG4gICAgICBjb25zdCBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IgPSAoMCwgX3JlYWN0LnVzZU1lbW8pKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgICAgLy8gLSBUaGlzIHJlbmRlciBtYXkgaGF2ZSBiZWVuIHRyaWdnZXJlZCBieSBhIFJlZHV4IHN0b3JlIHVwZGF0ZSB0aGF0IHByb2R1Y2VkIG5ldyBjaGlsZCBwcm9wc1xuICAgICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAgIC8vIEJ1dCwgaWYgd2UgaGF2ZSBuZXcgd3JhcHBlciBwcm9wcywgdGhvc2UgbWlnaHQgY2hhbmdlIHRoZSBjaGlsZCBwcm9wcywgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGluZ3MuXG4gICAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQ7XG4gICAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvIHRoaXMgYmVjYXVzZSBvbiByZW5kZXJzIF9ub3RfIGNhdXNlZCBieSBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRoZSBsYXRlc3Qgc3RvcmUgc3RhdGVcbiAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgICAgfSwgW3N0b3JlLCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIGNvbnN0IHN1YnNjcmliZUZvclJlYWN0ID0gKDAsIF9yZWFjdC51c2VNZW1vKSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZSA9IHJlYWN0TGlzdGVuZXIgPT4ge1xuICAgICAgICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN1YnNjcmliZVVwZGF0ZXMoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGlzTW91bnRlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgcmVhY3RMaXN0ZW5lcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZTtcbiAgICAgIH0sIFtzdWJzY3JpcHRpb25dKTtcbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTtcbiAgICAgIGxldCBhY3R1YWxDaGlsZFByb3BzO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhY3R1YWxDaGlsZFByb3BzID0gdXNlU3luY0V4dGVybmFsU3RvcmUoIC8vIFRPRE8gV2UncmUgcGFzc2luZyB0aHJvdWdoIGEgYmlnIHdyYXBwZXIgdGhhdCBkb2VzIGEgYnVuY2ggb2YgZXh0cmEgc2lkZSBlZmZlY3RzIGJlc2lkZXMgc3Vic2NyaWJpbmdcbiAgICAgICAgc3Vic2NyaWJlRm9yUmVhY3QsIC8vIFRPRE8gVGhpcyBpcyBpbmNyZWRpYmx5IGhhY2t5LiBXZSd2ZSBhbHJlYWR5IHByb2Nlc3NlZCB0aGUgc3RvcmUgdXBkYXRlIGFuZCBjYWxjdWxhdGVkIG5ldyBjaGlsZCBwcm9wcyxcbiAgICAgICAgLy8gVE9ETyBhbmQgd2UncmUganVzdCBwYXNzaW5nIHRoYXQgdGhyb3VnaCBzbyBpdCB0cmlnZ2VycyBhIHJlLXJlbmRlciBmb3IgdXMgcmF0aGVyIHRoYW4gcmVseWluZyBvbiBgdVNFU2AuXG4gICAgICAgIGFjdHVhbENoaWxkUHJvcHNTZWxlY3RvciwgZ2V0U2VydmVyU3RhdGUgPyAoKSA9PiBjaGlsZFByb3BzU2VsZWN0b3IoZ2V0U2VydmVyU3RhdGUoKSwgd3JhcHBlclByb3BzKSA6IGFjdHVhbENoaWxkUHJvcHNTZWxlY3Rvcik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgICAgIDtcbiAgICAgICAgICBlcnIubWVzc2FnZSArPSBgXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG4ke2xhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFja31cXG5cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICAoMCwgX3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QudXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCkoKCkgPT4ge1xuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gICAgICB9KTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIGNvbnN0IHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9ICgwLCBfcmVhY3QudXNlTWVtbykoKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgICB9KSlcbiAgICAgICAgKTtcbiAgICAgIH0sIFtyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgY29uc3QgcmVuZGVyZWRDaGlsZCA9ICgwLCBfcmVhY3QudXNlTWVtbykoKCkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH1cblxuICAgIGNvbnN0IF9Db25uZWN0ID0gX3JlYWN0LmRlZmF1bHQubWVtbyhDb25uZWN0RnVuY3Rpb24pO1xuXG4gICAgLy8gQWRkIGEgaGFja3kgY2FzdCB0byBnZXQgdGhlIHJpZ2h0IG91dHB1dCB0eXBlXG4gICAgY29uc3QgQ29ubmVjdCA9IF9Db25uZWN0O1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IENvbm5lY3RGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIGNvbnN0IF9mb3J3YXJkZWQgPSBfcmVhY3QuZGVmYXVsdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGZvcndhcmRlZCA9IF9mb3J3YXJkZWQ7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiAoMCwgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzLmRlZmF1bHQpKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfaG9pc3ROb25SZWFjdFN0YXRpY3MuZGVmYXVsdCkoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBXaXRoQ29ubmVjdDtcbn1cblxudmFyIF9kZWZhdWx0ID0gY29ubmVjdDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxJQUFBQSx1QkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZUFBQSxHQUFBRix1QkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsbUJBQUEsR0FBQUgsdUJBQUEsQ0FB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