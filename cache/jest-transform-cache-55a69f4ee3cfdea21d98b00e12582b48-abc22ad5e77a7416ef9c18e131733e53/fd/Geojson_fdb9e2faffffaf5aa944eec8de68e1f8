1866ab321dc9639483af799584e29948
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _jsxRuntime = require("react/jsx-runtime");
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var React = __importStar(require("react"));
var MapMarker_1 = __importDefault(require("./MapMarker"));
var MapPolyline_1 = __importDefault(require("./MapPolyline"));
var MapPolygon_1 = __importDefault(require("./MapPolygon"));
var Geojson = function Geojson(props) {
  var geojson = props.geojson,
    strokeColor = props.strokeColor,
    fillColor = props.fillColor,
    strokeWidth = props.strokeWidth,
    color = props.color,
    title = props.title,
    image = props.image,
    zIndex = props.zIndex,
    _onPress = props.onPress,
    lineCap = props.lineCap,
    lineJoin = props.lineJoin,
    tappable = props.tappable,
    tracksViewChanges = props.tracksViewChanges,
    miterLimit = props.miterLimit,
    lineDashPhase = props.lineDashPhase,
    lineDashPattern = props.lineDashPattern,
    markerComponent = props.markerComponent;
  var pointOverlays = makePointOverlays(geojson.features);
  var lineOverlays = makeLineOverlays(geojson.features);
  var polygonOverlays = makePolygonOverlays(geojson.features);
  return (0, _jsxRuntime.jsxs)(React.Fragment, {
    children: [pointOverlays.map(function (overlay, index) {
      var _overlay$feature$prop;
      var markerColor = getColor(color, overlay, 'marker-color');
      var pointOverlayTracksViewChanges = ((_overlay$feature$prop = overlay.feature.properties) == null ? void 0 : _overlay$feature$prop.tracksViewChanges) || tracksViewChanges;
      return (0, _jsxRuntime.jsx)(MapMarker_1.default, {
        coordinate: overlay.coordinates,
        tracksViewChanges: pointOverlayTracksViewChanges,
        image: image,
        title: title,
        pinColor: markerColor,
        zIndex: zIndex,
        onPress: function onPress() {
          return _onPress && _onPress(overlay);
        },
        children: markerComponent
      }, index);
    }), lineOverlays.map(function (overlay, index) {
      var lineStrokeColor = getColor(strokeColor, overlay, 'stroke');
      var lineStrokeWidth = getStrokeWidth(strokeWidth, overlay);
      return (0, _jsxRuntime.jsx)(MapPolyline_1.default, {
        coordinates: overlay.coordinates,
        strokeColor: lineStrokeColor,
        strokeWidth: lineStrokeWidth,
        lineDashPhase: lineDashPhase,
        lineDashPattern: lineDashPattern,
        lineCap: lineCap,
        lineJoin: lineJoin,
        miterLimit: miterLimit,
        zIndex: zIndex,
        tappable: tappable,
        onPress: function onPress() {
          return _onPress && _onPress(overlay);
        }
      }, index);
    }), polygonOverlays.map(function (overlay, index) {
      var polygonFillColor = getColor(fillColor, overlay, 'fill');
      var lineStrokeColor = getColor(strokeColor, overlay, 'stroke');
      var lineStrokeWidth = getStrokeWidth(strokeWidth, overlay);
      return (0, _jsxRuntime.jsx)(MapPolygon_1.default, {
        coordinates: overlay.coordinates,
        holes: overlay.holes,
        strokeColor: lineStrokeColor,
        fillColor: polygonFillColor,
        strokeWidth: lineStrokeWidth,
        tappable: tappable,
        onPress: function onPress() {
          return _onPress && _onPress(overlay);
        },
        zIndex: zIndex
      }, index);
    })]
  });
};
exports.default = Geojson;
var makePointOverlays = function makePointOverlays(features) {
  return features.filter(isAnyPointFeature).map(function (feature) {
    return makeCoordinatesForAnyPoint(feature.geometry).map(function (coordinates) {
      return makeOverlayForAnyPoint(coordinates, feature);
    });
  }).reduce(function (prev, curr) {
    return prev.concat(curr);
  }, []).map(function (overlay) {
    return Object.assign({}, overlay, {
      type: 'point'
    });
  });
};
var makeLineOverlays = function makeLineOverlays(features) {
  return features.filter(isAnyLineStringFeature).map(function (feature) {
    return makeCoordinatesForAnyLine(feature.geometry).map(function (coordinates) {
      return makeOverlayForAnyLine(coordinates, feature);
    });
  }).reduce(function (prev, curr) {
    return prev.concat(curr);
  }, []).map(function (overlay) {
    return Object.assign({}, overlay, {
      type: 'polyline'
    });
  });
};
var makePolygonOverlays = function makePolygonOverlays(features) {
  var multipolygons = features.filter(isMultiPolygonFeature).map(function (feature) {
    return makeCoordinatesForMultiPolygon(feature.geometry).map(function (coordinates) {
      return makeOverlayForAnyPolygon(coordinates, feature);
    });
  }).reduce(function (prev, curr) {
    return prev.concat(curr);
  }, []).map(function (overlay) {
    return Object.assign({}, overlay, {
      type: 'polygon'
    });
  });
  var polygons = features.filter(isPolygonFeature).map(function (feature) {
    return makeOverlayForAnyPolygon(makeCoordinatesForPolygon(feature.geometry), feature);
  }).reduce(function (prev, curr) {
    return prev.concat(curr);
  }, []).map(function (overlay) {
    return Object.assign({}, overlay, {
      type: 'polygon'
    });
  });
  return polygons.concat(multipolygons);
};
var makeOverlayForAnyPoint = function makeOverlayForAnyPoint(coordinates, feature) {
  return {
    feature: feature,
    coordinates: coordinates
  };
};
var makeOverlayForAnyLine = function makeOverlayForAnyLine(coordinates, feature) {
  return {
    feature: feature,
    coordinates: coordinates
  };
};
var makeOverlayForAnyPolygon = function makeOverlayForAnyPolygon(coordinates, feature) {
  return {
    feature: feature,
    coordinates: coordinates[0],
    holes: coordinates.length > 1 ? coordinates.slice(1) : undefined
  };
};
var makePoint = function makePoint(c) {
  return {
    latitude: c[1],
    longitude: c[0]
  };
};
var makeLine = function makeLine(l) {
  return l.map(makePoint);
};
var makeCoordinatesForAnyPoint = function makeCoordinatesForAnyPoint(geometry) {
  if (geometry.type === 'Point') {
    return [makePoint(geometry.coordinates)];
  }
  return geometry.coordinates.map(makePoint);
};
var makeCoordinatesForAnyLine = function makeCoordinatesForAnyLine(geometry) {
  if (geometry.type === 'LineString') {
    return [makeLine(geometry.coordinates)];
  }
  return geometry.coordinates.map(makeLine);
};
var makeCoordinatesForPolygon = function makeCoordinatesForPolygon(geometry) {
  return geometry.coordinates.map(makeLine);
};
var makeCoordinatesForMultiPolygon = function makeCoordinatesForMultiPolygon(geometry) {
  return geometry.coordinates.map(function (p) {
    return p.map(makeLine);
  });
};
var getRgbaFromHex = function getRgbaFromHex(hex) {
  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var matchArray = hex.match(/\w\w/g);
  if (!matchArray || matchArray.length < 3) {
    throw new Error('Invalid hex string');
  }
  var _matchArray$map = matchArray.map(function (x) {
      var subColor = parseInt(x, 16);
      if (Number.isNaN(subColor)) {
        throw new Error('Invalid hex string');
      }
      return subColor;
    }),
    _matchArray$map2 = (0, _slicedToArray2.default)(_matchArray$map, 3),
    r = _matchArray$map2[0],
    g = _matchArray$map2[1],
    b = _matchArray$map2[2];
  return "rgba(" + r + "," + g + "," + b + "," + alpha + ")";
};
var getColor = function getColor(prop, overlay, colorType) {
  var _overlay$feature$prop2;
  if (prop) {
    return prop;
  }
  var color = (_overlay$feature$prop2 = overlay.feature.properties) == null ? void 0 : _overlay$feature$prop2[colorType];
  if (color) {
    var _overlay$feature$prop3;
    var opacityProperty = colorType + '-opacity';
    var alpha = (_overlay$feature$prop3 = overlay.feature.properties) == null ? void 0 : _overlay$feature$prop3[opacityProperty];
    if (alpha && alpha !== '0' && color[0] === '#') {
      color = getRgbaFromHex(color, alpha);
    }
    return color;
  }
  return undefined;
};
var getStrokeWidth = function getStrokeWidth(prop, overlay) {
  var _overlay$feature$prop4;
  if (prop) {
    return prop;
  }
  return (_overlay$feature$prop4 = overlay.feature.properties) == null ? void 0 : _overlay$feature$prop4['stroke-width'];
};
var isPointFeature = function isPointFeature(feature) {
  return feature.geometry.type === 'Point';
};
var isMultiPointFeature = function isMultiPointFeature(feature) {
  return feature.geometry.type === 'MultiPoint';
};
var isAnyPointFeature = function isAnyPointFeature(feature) {
  return isPointFeature(feature) || isMultiPointFeature(feature);
};
var isLineStringFeature = function isLineStringFeature(feature) {
  return feature.geometry.type === 'LineString';
};
var isMultiLineStringFeature = function isMultiLineStringFeature(feature) {
  return feature.geometry.type === 'MultiLineString';
};
var isAnyLineStringFeature = function isAnyLineStringFeature(feature) {
  return isLineStringFeature(feature) || isMultiLineStringFeature(feature);
};
var isPolygonFeature = function isPolygonFeature(feature) {
  return feature.geometry.type === 'Polygon';
};
var isMultiPolygonFeature = function isMultiPolygonFeature(feature) {
  return feature.geometry.type === 'MultiPolygon';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zbGljZWRUb0FycmF5MiIsIl9qc3hSdW50aW1lIiwiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwicmVzdWx0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19pbXBvcnREZWZhdWx0IiwiZXhwb3J0cyIsIlJlYWN0IiwiTWFwTWFya2VyXzEiLCJNYXBQb2x5bGluZV8xIiwiTWFwUG9seWdvbl8xIiwiR2VvanNvbiIsInByb3BzIiwiZ2VvanNvbiIsInN0cm9rZUNvbG9yIiwiZmlsbENvbG9yIiwic3Ryb2tlV2lkdGgiLCJjb2xvciIsInRpdGxlIiwiaW1hZ2UiLCJ6SW5kZXgiLCJvblByZXNzIiwibGluZUNhcCIsImxpbmVKb2luIiwidGFwcGFibGUiLCJ0cmFja3NWaWV3Q2hhbmdlcyIsIm1pdGVyTGltaXQiLCJsaW5lRGFzaFBoYXNlIiwibGluZURhc2hQYXR0ZXJuIiwibWFya2VyQ29tcG9uZW50IiwicG9pbnRPdmVybGF5cyIsIm1ha2VQb2ludE92ZXJsYXlzIiwiZmVhdHVyZXMiLCJsaW5lT3ZlcmxheXMiLCJtYWtlTGluZU92ZXJsYXlzIiwicG9seWdvbk92ZXJsYXlzIiwibWFrZVBvbHlnb25PdmVybGF5cyIsImpzeHMiLCJGcmFnbWVudCIsImNoaWxkcmVuIiwibWFwIiwib3ZlcmxheSIsImluZGV4IiwiX292ZXJsYXkkZmVhdHVyZSRwcm9wIiwibWFya2VyQ29sb3IiLCJnZXRDb2xvciIsInBvaW50T3ZlcmxheVRyYWNrc1ZpZXdDaGFuZ2VzIiwiZmVhdHVyZSIsInByb3BlcnRpZXMiLCJqc3giLCJkZWZhdWx0IiwiY29vcmRpbmF0ZSIsImNvb3JkaW5hdGVzIiwicGluQ29sb3IiLCJsaW5lU3Ryb2tlQ29sb3IiLCJsaW5lU3Ryb2tlV2lkdGgiLCJnZXRTdHJva2VXaWR0aCIsInBvbHlnb25GaWxsQ29sb3IiLCJob2xlcyIsImZpbHRlciIsImlzQW55UG9pbnRGZWF0dXJlIiwibWFrZUNvb3JkaW5hdGVzRm9yQW55UG9pbnQiLCJnZW9tZXRyeSIsIm1ha2VPdmVybGF5Rm9yQW55UG9pbnQiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyciIsImNvbmNhdCIsImFzc2lnbiIsInR5cGUiLCJpc0FueUxpbmVTdHJpbmdGZWF0dXJlIiwibWFrZUNvb3JkaW5hdGVzRm9yQW55TGluZSIsIm1ha2VPdmVybGF5Rm9yQW55TGluZSIsIm11bHRpcG9seWdvbnMiLCJpc011bHRpUG9seWdvbkZlYXR1cmUiLCJtYWtlQ29vcmRpbmF0ZXNGb3JNdWx0aVBvbHlnb24iLCJtYWtlT3ZlcmxheUZvckFueVBvbHlnb24iLCJwb2x5Z29ucyIsImlzUG9seWdvbkZlYXR1cmUiLCJtYWtlQ29vcmRpbmF0ZXNGb3JQb2x5Z29uIiwibGVuZ3RoIiwic2xpY2UiLCJtYWtlUG9pbnQiLCJjIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJtYWtlTGluZSIsImwiLCJwIiwiZ2V0UmdiYUZyb21IZXgiLCJoZXgiLCJhbHBoYSIsImFyZ3VtZW50cyIsIm1hdGNoQXJyYXkiLCJtYXRjaCIsIkVycm9yIiwiX21hdGNoQXJyYXkkbWFwIiwieCIsInN1YkNvbG9yIiwicGFyc2VJbnQiLCJOdW1iZXIiLCJpc05hTiIsIl9tYXRjaEFycmF5JG1hcDIiLCJyIiwiZyIsImIiLCJwcm9wIiwiY29sb3JUeXBlIiwiX292ZXJsYXkkZmVhdHVyZSRwcm9wMiIsIl9vdmVybGF5JGZlYXR1cmUkcHJvcDMiLCJvcGFjaXR5UHJvcGVydHkiLCJfb3ZlcmxheSRmZWF0dXJlJHByb3A0IiwiaXNQb2ludEZlYXR1cmUiLCJpc011bHRpUG9pbnRGZWF0dXJlIiwiaXNMaW5lU3RyaW5nRmVhdHVyZSIsImlzTXVsdGlMaW5lU3RyaW5nRmVhdHVyZSJdLCJzb3VyY2VzIjpbIkdlb2pzb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IFJlYWN0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5jb25zdCBNYXBNYXJrZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9NYXBNYXJrZXJcIikpO1xuY29uc3QgTWFwUG9seWxpbmVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9NYXBQb2x5bGluZVwiKSk7XG5jb25zdCBNYXBQb2x5Z29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTWFwUG9seWdvblwiKSk7XG5jb25zdCBHZW9qc29uID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBnZW9qc29uLCBzdHJva2VDb2xvciwgZmlsbENvbG9yLCBzdHJva2VXaWR0aCwgY29sb3IsIHRpdGxlLCBpbWFnZSwgekluZGV4LCBvblByZXNzLCBsaW5lQ2FwLCBsaW5lSm9pbiwgdGFwcGFibGUsIHRyYWNrc1ZpZXdDaGFuZ2VzLCBtaXRlckxpbWl0LCBsaW5lRGFzaFBoYXNlLCBsaW5lRGFzaFBhdHRlcm4sIG1hcmtlckNvbXBvbmVudCwgfSA9IHByb3BzO1xuICAgIGNvbnN0IHBvaW50T3ZlcmxheXMgPSBtYWtlUG9pbnRPdmVybGF5cyhnZW9qc29uLmZlYXR1cmVzKTtcbiAgICBjb25zdCBsaW5lT3ZlcmxheXMgPSBtYWtlTGluZU92ZXJsYXlzKGdlb2pzb24uZmVhdHVyZXMpO1xuICAgIGNvbnN0IHBvbHlnb25PdmVybGF5cyA9IG1ha2VQb2x5Z29uT3ZlcmxheXMoZ2VvanNvbi5mZWF0dXJlcyk7XG4gICAgcmV0dXJuICg8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICB7cG9pbnRPdmVybGF5cy5tYXAoKG92ZXJsYXksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXJrZXJDb2xvciA9IGdldENvbG9yKGNvbG9yLCBvdmVybGF5LCAnbWFya2VyLWNvbG9yJyk7XG4gICAgICAgICAgICBjb25zdCBwb2ludE92ZXJsYXlUcmFja3NWaWV3Q2hhbmdlcyA9IG92ZXJsYXkuZmVhdHVyZS5wcm9wZXJ0aWVzPy50cmFja3NWaWV3Q2hhbmdlcyB8fCB0cmFja3NWaWV3Q2hhbmdlcztcbiAgICAgICAgICAgIHJldHVybiAoPE1hcE1hcmtlcl8xLmRlZmF1bHQga2V5PXtpbmRleH0gY29vcmRpbmF0ZT17b3ZlcmxheS5jb29yZGluYXRlc30gdHJhY2tzVmlld0NoYW5nZXM9e3BvaW50T3ZlcmxheVRyYWNrc1ZpZXdDaGFuZ2VzfSBpbWFnZT17aW1hZ2V9IHRpdGxlPXt0aXRsZX0gcGluQ29sb3I9e21hcmtlckNvbG9yfSB6SW5kZXg9e3pJbmRleH0gb25QcmVzcz17KCkgPT4gb25QcmVzcyAmJiBvblByZXNzKG92ZXJsYXkpfT5cbiAgICAgICAgICAgIHttYXJrZXJDb21wb25lbnR9XG4gICAgICAgICAgPC9NYXBNYXJrZXJfMS5kZWZhdWx0Pik7XG4gICAgICAgIH0pfVxuICAgICAge2xpbmVPdmVybGF5cy5tYXAoKG92ZXJsYXksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsaW5lU3Ryb2tlQ29sb3IgPSBnZXRDb2xvcihzdHJva2VDb2xvciwgb3ZlcmxheSwgJ3N0cm9rZScpO1xuICAgICAgICAgICAgY29uc3QgbGluZVN0cm9rZVdpZHRoID0gZ2V0U3Ryb2tlV2lkdGgoc3Ryb2tlV2lkdGgsIG92ZXJsYXkpO1xuICAgICAgICAgICAgcmV0dXJuICg8TWFwUG9seWxpbmVfMS5kZWZhdWx0IGtleT17aW5kZXh9IGNvb3JkaW5hdGVzPXtvdmVybGF5LmNvb3JkaW5hdGVzfSBzdHJva2VDb2xvcj17bGluZVN0cm9rZUNvbG9yfSBzdHJva2VXaWR0aD17bGluZVN0cm9rZVdpZHRofSBsaW5lRGFzaFBoYXNlPXtsaW5lRGFzaFBoYXNlfSBsaW5lRGFzaFBhdHRlcm49e2xpbmVEYXNoUGF0dGVybn0gbGluZUNhcD17bGluZUNhcH0gbGluZUpvaW49e2xpbmVKb2lufSBtaXRlckxpbWl0PXttaXRlckxpbWl0fSB6SW5kZXg9e3pJbmRleH0gdGFwcGFibGU9e3RhcHBhYmxlfSBvblByZXNzPXsoKSA9PiBvblByZXNzICYmIG9uUHJlc3Mob3ZlcmxheSl9Lz4pO1xuICAgICAgICB9KX1cbiAgICAgIHtwb2x5Z29uT3ZlcmxheXMubWFwKChvdmVybGF5LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcG9seWdvbkZpbGxDb2xvciA9IGdldENvbG9yKGZpbGxDb2xvciwgb3ZlcmxheSwgJ2ZpbGwnKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVTdHJva2VDb2xvciA9IGdldENvbG9yKHN0cm9rZUNvbG9yLCBvdmVybGF5LCAnc3Ryb2tlJyk7XG4gICAgICAgICAgICBjb25zdCBsaW5lU3Ryb2tlV2lkdGggPSBnZXRTdHJva2VXaWR0aChzdHJva2VXaWR0aCwgb3ZlcmxheSk7XG4gICAgICAgICAgICByZXR1cm4gKDxNYXBQb2x5Z29uXzEuZGVmYXVsdCBrZXk9e2luZGV4fSBjb29yZGluYXRlcz17b3ZlcmxheS5jb29yZGluYXRlc30gaG9sZXM9e292ZXJsYXkuaG9sZXN9IHN0cm9rZUNvbG9yPXtsaW5lU3Ryb2tlQ29sb3J9IGZpbGxDb2xvcj17cG9seWdvbkZpbGxDb2xvcn0gc3Ryb2tlV2lkdGg9e2xpbmVTdHJva2VXaWR0aH0gdGFwcGFibGU9e3RhcHBhYmxlfSBvblByZXNzPXsoKSA9PiBvblByZXNzICYmIG9uUHJlc3Mob3ZlcmxheSl9IHpJbmRleD17ekluZGV4fS8+KTtcbiAgICAgICAgfSl9XG4gICAgPC9SZWFjdC5GcmFnbWVudD4pO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IEdlb2pzb247XG5jb25zdCBtYWtlUG9pbnRPdmVybGF5cyA9IChmZWF0dXJlcykgPT4ge1xuICAgIHJldHVybiBmZWF0dXJlc1xuICAgICAgICAuZmlsdGVyKGlzQW55UG9pbnRGZWF0dXJlKVxuICAgICAgICAubWFwKGZlYXR1cmUgPT4gbWFrZUNvb3JkaW5hdGVzRm9yQW55UG9pbnQoZmVhdHVyZS5nZW9tZXRyeSkubWFwKGNvb3JkaW5hdGVzID0+IG1ha2VPdmVybGF5Rm9yQW55UG9pbnQoY29vcmRpbmF0ZXMsIGZlYXR1cmUpKSlcbiAgICAgICAgLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldi5jb25jYXQoY3VyciksIFtdKVxuICAgICAgICAubWFwKG92ZXJsYXkgPT4gKHsgLi4ub3ZlcmxheSwgdHlwZTogJ3BvaW50JyB9KSk7XG59O1xuY29uc3QgbWFrZUxpbmVPdmVybGF5cyA9IChmZWF0dXJlcykgPT4ge1xuICAgIHJldHVybiBmZWF0dXJlc1xuICAgICAgICAuZmlsdGVyKGlzQW55TGluZVN0cmluZ0ZlYXR1cmUpXG4gICAgICAgIC5tYXAoZmVhdHVyZSA9PiBtYWtlQ29vcmRpbmF0ZXNGb3JBbnlMaW5lKGZlYXR1cmUuZ2VvbWV0cnkpLm1hcChjb29yZGluYXRlcyA9PiBtYWtlT3ZlcmxheUZvckFueUxpbmUoY29vcmRpbmF0ZXMsIGZlYXR1cmUpKSlcbiAgICAgICAgLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldi5jb25jYXQoY3VyciksIFtdKVxuICAgICAgICAubWFwKG92ZXJsYXkgPT4gKHsgLi4ub3ZlcmxheSwgdHlwZTogJ3BvbHlsaW5lJyB9KSk7XG59O1xuY29uc3QgbWFrZVBvbHlnb25PdmVybGF5cyA9IChmZWF0dXJlcykgPT4ge1xuICAgIGNvbnN0IG11bHRpcG9seWdvbnMgPSBmZWF0dXJlc1xuICAgICAgICAuZmlsdGVyKGlzTXVsdGlQb2x5Z29uRmVhdHVyZSlcbiAgICAgICAgLm1hcChmZWF0dXJlID0+IG1ha2VDb29yZGluYXRlc0Zvck11bHRpUG9seWdvbihmZWF0dXJlLmdlb21ldHJ5KS5tYXAoY29vcmRpbmF0ZXMgPT4gbWFrZU92ZXJsYXlGb3JBbnlQb2x5Z29uKGNvb3JkaW5hdGVzLCBmZWF0dXJlKSkpXG4gICAgICAgIC5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHByZXYuY29uY2F0KGN1cnIpLCBbXSlcbiAgICAgICAgLm1hcChvdmVybGF5ID0+ICh7IC4uLm92ZXJsYXksIHR5cGU6ICdwb2x5Z29uJyB9KSk7XG4gICAgY29uc3QgcG9seWdvbnMgPSBmZWF0dXJlc1xuICAgICAgICAuZmlsdGVyKGlzUG9seWdvbkZlYXR1cmUpXG4gICAgICAgIC5tYXAoZmVhdHVyZSA9PiBtYWtlT3ZlcmxheUZvckFueVBvbHlnb24obWFrZUNvb3JkaW5hdGVzRm9yUG9seWdvbihmZWF0dXJlLmdlb21ldHJ5KSwgZmVhdHVyZSkpXG4gICAgICAgIC5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHByZXYuY29uY2F0KGN1cnIpLCBbXSlcbiAgICAgICAgLm1hcChvdmVybGF5ID0+ICh7IC4uLm92ZXJsYXksIHR5cGU6ICdwb2x5Z29uJyB9KSk7XG4gICAgcmV0dXJuIHBvbHlnb25zLmNvbmNhdChtdWx0aXBvbHlnb25zKTtcbn07XG5jb25zdCBtYWtlT3ZlcmxheUZvckFueVBvaW50ID0gKGNvb3JkaW5hdGVzLCBmZWF0dXJlKSA9PiB7XG4gICAgcmV0dXJuIHsgZmVhdHVyZSwgY29vcmRpbmF0ZXMgfTtcbn07XG5jb25zdCBtYWtlT3ZlcmxheUZvckFueUxpbmUgPSAoY29vcmRpbmF0ZXMsIGZlYXR1cmUpID0+IHtcbiAgICByZXR1cm4geyBmZWF0dXJlLCBjb29yZGluYXRlcyB9O1xufTtcbmNvbnN0IG1ha2VPdmVybGF5Rm9yQW55UG9seWdvbiA9IChjb29yZGluYXRlcywgZmVhdHVyZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGZlYXR1cmUsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1swXSxcbiAgICAgICAgaG9sZXM6IGNvb3JkaW5hdGVzLmxlbmd0aCA+IDEgPyBjb29yZGluYXRlcy5zbGljZSgxKSA6IHVuZGVmaW5lZCxcbiAgICB9O1xufTtcbmNvbnN0IG1ha2VQb2ludCA9IChjKSA9PiAoe1xuICAgIGxhdGl0dWRlOiBjWzFdLFxuICAgIGxvbmdpdHVkZTogY1swXSxcbn0pO1xuY29uc3QgbWFrZUxpbmUgPSAobCkgPT4gbC5tYXAobWFrZVBvaW50KTtcbmNvbnN0IG1ha2VDb29yZGluYXRlc0ZvckFueVBvaW50ID0gKGdlb21ldHJ5KSA9PiB7XG4gICAgaWYgKGdlb21ldHJ5LnR5cGUgPT09ICdQb2ludCcpIHtcbiAgICAgICAgcmV0dXJuIFttYWtlUG9pbnQoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpXTtcbiAgICB9XG4gICAgcmV0dXJuIGdlb21ldHJ5LmNvb3JkaW5hdGVzLm1hcChtYWtlUG9pbnQpO1xufTtcbmNvbnN0IG1ha2VDb29yZGluYXRlc0ZvckFueUxpbmUgPSAoZ2VvbWV0cnkpID0+IHtcbiAgICBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ0xpbmVTdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBbbWFrZUxpbmUoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpXTtcbiAgICB9XG4gICAgcmV0dXJuIGdlb21ldHJ5LmNvb3JkaW5hdGVzLm1hcChtYWtlTGluZSk7XG59O1xuY29uc3QgbWFrZUNvb3JkaW5hdGVzRm9yUG9seWdvbiA9IChnZW9tZXRyeSkgPT4ge1xuICAgIHJldHVybiBnZW9tZXRyeS5jb29yZGluYXRlcy5tYXAobWFrZUxpbmUpO1xufTtcbmNvbnN0IG1ha2VDb29yZGluYXRlc0Zvck11bHRpUG9seWdvbiA9IChnZW9tZXRyeSkgPT4ge1xuICAgIHJldHVybiBnZW9tZXRyeS5jb29yZGluYXRlcy5tYXAocCA9PiBwLm1hcChtYWtlTGluZSkpO1xufTtcbmNvbnN0IGdldFJnYmFGcm9tSGV4ID0gKGhleCwgYWxwaGEgPSAxKSA9PiB7XG4gICAgY29uc3QgbWF0Y2hBcnJheSA9IGhleC5tYXRjaCgvXFx3XFx3L2cpO1xuICAgIGlmICghbWF0Y2hBcnJheSB8fCBtYXRjaEFycmF5Lmxlbmd0aCA8IDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKTtcbiAgICB9XG4gICAgY29uc3QgW3IsIGcsIGJdID0gbWF0Y2hBcnJheS5tYXAoeCA9PiB7XG4gICAgICAgIGNvbnN0IHN1YkNvbG9yID0gcGFyc2VJbnQoeCwgMTYpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHN1YkNvbG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3ViQ29sb3I7XG4gICAgfSk7XG4gICAgcmV0dXJuIGByZ2JhKCR7cn0sJHtnfSwke2J9LCR7YWxwaGF9KWA7XG59O1xuY29uc3QgZ2V0Q29sb3IgPSAocHJvcCwgb3ZlcmxheSwgY29sb3JUeXBlKSA9PiB7XG4gICAgaWYgKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuICAgIGxldCBjb2xvciA9IG92ZXJsYXkuZmVhdHVyZS5wcm9wZXJ0aWVzPy5bY29sb3JUeXBlXTtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgY29uc3Qgb3BhY2l0eVByb3BlcnR5ID0gY29sb3JUeXBlICsgJy1vcGFjaXR5JztcbiAgICAgICAgY29uc3QgYWxwaGEgPSBvdmVybGF5LmZlYXR1cmUucHJvcGVydGllcz8uW29wYWNpdHlQcm9wZXJ0eV07XG4gICAgICAgIGlmIChhbHBoYSAmJiBhbHBoYSAhPT0gJzAnICYmIGNvbG9yWzBdID09PSAnIycpIHtcbiAgICAgICAgICAgIGNvbG9yID0gZ2V0UmdiYUZyb21IZXgoY29sb3IsIGFscGhhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuY29uc3QgZ2V0U3Ryb2tlV2lkdGggPSAocHJvcCwgb3ZlcmxheSkgPT4ge1xuICAgIGlmIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cbiAgICByZXR1cm4gb3ZlcmxheS5mZWF0dXJlLnByb3BlcnRpZXM/Llsnc3Ryb2tlLXdpZHRoJ107XG59O1xuLy8gR2VvSlNPTi5GZWF0dXJlIHR5cGUtZ3VhcmRzXG5jb25zdCBpc1BvaW50RmVhdHVyZSA9IChmZWF0dXJlKSA9PiBmZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT09ICdQb2ludCc7XG5jb25zdCBpc011bHRpUG9pbnRGZWF0dXJlID0gKGZlYXR1cmUpID0+IGZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9pbnQnO1xuY29uc3QgaXNBbnlQb2ludEZlYXR1cmUgPSAoZmVhdHVyZSkgPT4gaXNQb2ludEZlYXR1cmUoZmVhdHVyZSkgfHwgaXNNdWx0aVBvaW50RmVhdHVyZShmZWF0dXJlKTtcbmNvbnN0IGlzTGluZVN0cmluZ0ZlYXR1cmUgPSAoZmVhdHVyZSkgPT4gZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnTGluZVN0cmluZyc7XG5jb25zdCBpc011bHRpTGluZVN0cmluZ0ZlYXR1cmUgPSAoZmVhdHVyZSkgPT4gZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnTXVsdGlMaW5lU3RyaW5nJztcbmNvbnN0IGlzQW55TGluZVN0cmluZ0ZlYXR1cmUgPSAoZmVhdHVyZSkgPT4gaXNMaW5lU3RyaW5nRmVhdHVyZShmZWF0dXJlKSB8fCBpc011bHRpTGluZVN0cmluZ0ZlYXR1cmUoZmVhdHVyZSk7XG5jb25zdCBpc1BvbHlnb25GZWF0dXJlID0gKGZlYXR1cmUpID0+IGZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gJ1BvbHlnb24nO1xuY29uc3QgaXNNdWx0aVBvbHlnb25GZWF0dXJlID0gKGZlYXR1cmUpID0+IGZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9seWdvbic7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUNiLElBQUlHLGVBQWUsR0FBSSxJQUFJLElBQUksSUFBSSxDQUFDQSxlQUFlLEtBQU1DLE1BQU0sQ0FBQ0MsTUFBTSxHQUFJLFVBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUUsRUFBRTtFQUM1RixJQUFJQSxFQUFFLEtBQUtDLFNBQVMsRUFBRUQsRUFBRSxHQUFHRCxDQUFDO0VBQzVCLElBQUlHLElBQUksR0FBR1AsTUFBTSxDQUFDUSx3QkFBd0IsQ0FBQ0wsQ0FBQyxFQUFFQyxDQUFDLENBQUM7RUFDaEQsSUFBSSxDQUFDRyxJQUFJLEtBQUssS0FBSyxJQUFJQSxJQUFJLEdBQUcsQ0FBQ0osQ0FBQyxDQUFDTSxVQUFVLEdBQUdGLElBQUksQ0FBQ0csUUFBUSxJQUFJSCxJQUFJLENBQUNJLFlBQVksQ0FBQyxFQUFFO0lBQ2pGSixJQUFJLEdBQUc7TUFBRUssVUFBVSxFQUFFLElBQUk7TUFBRUMsR0FBRyxFQUFFLFNBQUFBLElBQUEsRUFBVztRQUFFLE9BQU9WLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDO01BQUU7SUFBRSxDQUFDO0VBQy9EO0VBQ0FKLE1BQU0sQ0FBQ2MsY0FBYyxDQUFDWixDQUFDLEVB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