{"version":3,"names":["_getJestObj","mock","useDispatch","jest","fn","getCurrentPosition","success","location","coords","latitude","longitude","useNavigation","mockReturnValue","navigate","_interopRequireDefault","require","_asyncToGenerator2","_Base","_reactNative","_react","_reactTestRenderer","_reactNativeGeolocationService","_reactRedux","_native","_reactNative2","_jsxRuntime","_require","timestamp","Date","now","toLocaleString","year","month","day","hour","minute","navigation","describe","mockDispatch","useDispatchMock","fetchMock","global","fetch","beforeAll","default","Promise","resolve","Geolocation","position","mockResponse","results","formatted","mockResolvedValue","json","beforeEach","mockReset","it","render","jsx","currentLabel","screen","getByTestId","expect","props","children","toBe","toHaveBeenCalled","currentLocation","address","time","_render","currentLocationTime","waitFor","test","_render2","currentLocationName","_render3","currentLocationItem","fireEvent","press","toHaveBeenCalledWith","clearAllLocations","_render4","Button","title","onPress","testID","clearAllButton","act","previousLocations","_render5","ScrollView","map","index","jsxs","View","TouchableOpacity","Text","style","color","fontSize","Pressable","getAllByTestId","previousNameElements","forEach","element","_render6","previousTimeElements","toHaveTextContent"],"sources":["Base.test.tsx"],"sourcesContent":["import Base from '../Base';\r\nimport {\r\n  render,\r\n  fireEvent,\r\n  screen,\r\n  waitFor,\r\n} from '@testing-library/react-native';\r\nimport React from 'react';\r\nimport fetchMock from 'jest-fetch-mock';\r\nimport {act} from 'react-test-renderer';\r\nimport Geolocation from 'react-native-geolocation-service';\r\nimport {useDispatch} from 'react-redux';\r\nimport {NativeStackNavigationProp} from '@react-navigation/native-stack';\r\nimport {useNavigation} from '@react-navigation/native';\r\nimport '@testing-library/jest-dom';\r\nimport {\r\n  Button,\r\n  Pressable,\r\n  ScrollView,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n} from 'react-native';\r\ndeclare var global: any;\r\njest.mock('react-redux', () => ({\r\n  useDispatch: jest.fn(),\r\n}));\r\nconst timestamp = new Date(Date.now()).toLocaleString([], {\r\n  year: 'numeric',\r\n  month: 'numeric',\r\n  day: 'numeric',\r\n  hour: '2-digit',\r\n  minute: '2-digit',\r\n});\r\nconst navigation = useNavigation<NativeStackNavigationProp<any>>();\r\njest.mock('react-native-geolocation-service', () => {\r\n  return {\r\n    getCurrentPosition: jest.fn(success => {\r\n      const location = {\r\n        coords: {\r\n          latitude: 17.3920466,\r\n          longitude: 78.4758037,\r\n        },\r\n      };\r\n      success(location);\r\n    }),\r\n  };\r\n});\r\njest.mock('@react-navigation/native', () => {\r\n  return {\r\n    useNavigation: jest.fn().mockReturnValue({\r\n      navigate: jest.fn(),\r\n    }),\r\n  };\r\n});\r\n\r\ndescribe('Locations List Screen/Base Component', () => {\r\n  let latitude: number;\r\n  let longitude: number;\r\n  const mockDispatch = jest.fn();\r\n  let useDispatchMock: jest.Mock;\r\n  const fetchMock = jest.fn();\r\n  global.fetch = fetchMock;\r\n  beforeAll(async () => {\r\n    await new Promise<void>(resolve => {\r\n      Geolocation.getCurrentPosition(position => {\r\n        latitude = position.coords.latitude;\r\n        longitude = position.coords.longitude;\r\n        resolve();\r\n      });\r\n    });\r\n  });\r\n  const mockResponse = {\r\n    results: [\r\n      {\r\n        formatted: '123 Main St, Anytown USA',\r\n      },\r\n    ],\r\n  };\r\n  global.fetch = jest.fn().mockResolvedValue({\r\n    json: () => Promise.resolve(mockResponse),\r\n  });\r\n  beforeEach(() => {\r\n    fetchMock.mockReset();\r\n    useDispatchMock = useDispatch as jest.Mock;\r\n    useDispatchMock.mockReturnValue(mockDispatch);\r\n  });\r\n\r\n  it('renders the base component correctly', () => {\r\n    render(<Base />);\r\n    const currentLabel = screen.getByTestId('list-current-label');\r\n    expect(currentLabel.props.children).toBe('Current Location');\r\n  });\r\n  it('should have the right location', () => {\r\n    render(<Base />);\r\n    expect(Geolocation.getCurrentPosition).toHaveBeenCalled();\r\n  });\r\n  it('renders the current location time', async () => {\r\n    const currentLocation = {\r\n      address: 'unnamed road',\r\n      time: timestamp,\r\n      latitude: 42.123456,\r\n      longitude: -71.123456,\r\n    };\r\n    const {getByTestId} = render(<Base />);\r\n    const currentLocationTime = await waitFor(() =>\r\n      getByTestId('list-current-time'),\r\n    );\r\n    expect(currentLocationTime.props.children).toBe(currentLocation.time);\r\n  });\r\n  test('displays current location', async () => {\r\n    const mockResponse = {\r\n      results: [\r\n        {\r\n          formatted: '123 Main St, Anytown USA',\r\n        },\r\n      ],\r\n    };\r\n    global.fetch = jest.fn().mockResolvedValue({\r\n      json: () => Promise.resolve(mockResponse),\r\n    });\r\n\r\n    const {getByTestId} = render(<Base />);\r\n\r\n    await waitFor(() => {\r\n      const currentLocationName = getByTestId('list-current-name');\r\n      expect(currentLocationName.props.children).toBe(\r\n        '123 Main St, Anytown USA',\r\n      );\r\n    });\r\n  });\r\n  it('renders the whole location item correctly', async () => {\r\n    const currentLocation = {\r\n      address: '123 Main St, Anytown USA',\r\n      time: timestamp,\r\n      latitude,\r\n      longitude,\r\n    };\r\n    const {getByTestId} = render(<Base />);\r\n    const currentLocationItem = await waitFor(() =>\r\n      getByTestId('list-current-item'),\r\n    );\r\n    fireEvent.press(currentLocationItem);\r\n    expect(navigation.navigate).toHaveBeenCalledWith('Map', {\r\n      address: currentLocation,\r\n    });\r\n  });\r\n  it('clears all locations on button press', async () => {\r\n    const clearAllLocations = jest.fn();\r\n    const {getByTestId} = render(\r\n      <Button\r\n        title=\"Clear All Locations\"\r\n        onPress={clearAllLocations}\r\n        testID=\"list-clear-all-button\"\r\n      />,\r\n    );\r\n    const clearAllButton = await waitFor(() =>\r\n      getByTestId('list-clear-all-button'),\r\n    );\r\n    await act(async () => {\r\n      fireEvent.press(clearAllButton);\r\n    });\r\n    expect(clearAllLocations).toHaveBeenCalled();\r\n  });\r\n  it('renders the correct text for previous locations', () => {\r\n    const previousLocations = [\r\n      {\r\n        address: '123 Main St',\r\n        time: '2022-02-28 10:00 AM',\r\n        latitude: 1.234567,\r\n        longitude: -1.234567,\r\n      },\r\n      {\r\n        address: '456 Elm St',\r\n        time: '2022-02-28 11:00 AM',\r\n        latitude: 2.345678,\r\n        longitude: -2.345678,\r\n      },\r\n    ];\r\n    const {getAllByTestId} = render(\r\n      <ScrollView>\r\n        {previousLocations.map((location, index) => (\r\n          <View key={index}>\r\n            <TouchableOpacity>\r\n              <View>\r\n                <Text\r\n                  style={{color: 'black', fontSize: 16}}\r\n                  testID={`list-previous-name-${index}`}>\r\n                  {location.address}\r\n                </Text>\r\n                <Text testID={`list-previous-time-${index}`}>\r\n                  {location.time}\r\n                </Text>\r\n              </View>\r\n            </TouchableOpacity>\r\n            <Pressable testID={`list-previous-remove-${index}`}>\r\n              <Text style={{color: 'black'}}>Remove</Text>\r\n            </Pressable>\r\n          </View>\r\n        ))}\r\n      </ScrollView>,\r\n    );\r\n    const previousNameElements = getAllByTestId(/list-previous-name-/);\r\n    previousNameElements.forEach((element, index) => {\r\n      expect(element.props.children).toBe(previousLocations[index].address);\r\n    });\r\n  });\r\n  it('renders the correct time for each of the previous locations', async () => {\r\n    const previousLocations = [\r\n      {\r\n        address: '123 Main St',\r\n        time: '2022-02-28 10:00 AM',\r\n        latitude: 1.234567,\r\n        longitude: -1.234567,\r\n      },\r\n      {\r\n        address: '456 Elm St',\r\n        time: '2022-02-28 11:00 AM',\r\n        latitude: 2.345678,\r\n        longitude: -2.345678,\r\n      },\r\n    ];\r\n    const {getAllByTestId} = render(\r\n      <ScrollView>\r\n        {previousLocations.map((location, index) => (\r\n          <View key={index}>\r\n            <TouchableOpacity>\r\n              <View>\r\n                <Text\r\n                  style={{color: 'black', fontSize: 16}}\r\n                  testID={`list-previous-name-${index}`}>\r\n                  {location.address}\r\n                </Text>\r\n                <Text testID={`list-previous-time-${index}`}>\r\n                  {location.time}\r\n                </Text>\r\n              </View>\r\n            </TouchableOpacity>\r\n            <Pressable testID={`list-previous-remove-${index}`}>\r\n              <Text style={{color: 'black'}}>Remove</Text>\r\n            </Pressable>\r\n          </View>\r\n        ))}\r\n      </ScrollView>,\r\n    );\r\n    const previousTimeElements = getAllByTestId(/list-previous-time-/);\r\n    expect(previousTimeElements[0]).toHaveTextContent('2022-02-28 10:00 AM');\r\n    expect(previousTimeElements[1]).toHaveTextContent('2022-02-28 11:00 AM');\r\n  });\r\n});\r\n"],"mappings":"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"}