2ec4e1c85e9cc507b105b1d53d0f2191
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _jsxRuntime = require("react/jsx-runtime");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapCalloutSubview = void 0;
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var decorateMapComponent_1 = __importStar(require("./decorateMapComponent"));
var MapCalloutSubview = function (_React$Component) {
  (0, _inherits2.default)(MapCalloutSubview, _React$Component);
  var _super = _createSuper(MapCalloutSubview);
  function MapCalloutSubview() {
    (0, _classCallCheck2.default)(this, MapCalloutSubview);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(MapCalloutSubview, [{
    key: "render",
    value: function render() {
      var AIRMapCalloutSubview = this.getNativeComponent();
      return (0, _jsxRuntime.jsx)(AIRMapCalloutSubview, Object.assign({}, this.props, {
        style: [styles.calloutSubview, this.props.style]
      }));
    }
  }]);
  return MapCalloutSubview;
}(React.Component);
exports.MapCalloutSubview = MapCalloutSubview;
var styles = react_native_1.StyleSheet.create({
  calloutSubview: {}
});
exports.default = (0, decorateMapComponent_1.default)(MapCalloutSubview, 'CalloutSubview', {
  google: {
    ios: decorateMapComponent_1.SUPPORTED,
    android: decorateMapComponent_1.NOT_SUPPORTED
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfanN4UnVudGltZSIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwiaGFzT3duUHJvcGVydHkiLCJleHBvcnRzIiwiTWFwQ2FsbG91dFN1YnZpZXciLCJSZWFjdCIsInJlYWN0X25hdGl2ZV8xIiwiZGVjb3JhdGVNYXBDb21wb25lbnRfMSIsIl9SZWFjdCRDb21wb25lbnQiLCJfc3VwZXIiLCJrZXkiLCJyZW5kZXIiLCJBSVJNYXBDYWxsb3V0U3VidmlldyIsImdldE5hdGl2ZUNvbXBvbmVudCIsImpzeCIsImFzc2lnbiIsInByb3BzIiwic3R5bGUiLCJzdHlsZXMiLCJjYWxsb3V0U3VidmlldyIsIkNvbXBvbmVudCIsIlN0eWxlU2hlZXQiLCJnb29nbGUiLCJpb3MiLCJTVVBQT1JURUQiLCJhbmRyb2lkIiwiTk9UX1NVUFBPUlRFRCJdLCJzb3VyY2VzIjpbIk1hcENhbGxvdXRTdWJ2aWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1hcENhbGxvdXRTdWJ2aWV3ID0gdm9pZCAwO1xuY29uc3QgUmVhY3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IHJlYWN0X25hdGl2ZV8xID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZVwiKTtcbmNvbnN0IGRlY29yYXRlTWFwQ29tcG9uZW50XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZGVjb3JhdGVNYXBDb21wb25lbnRcIikpO1xuY2xhc3MgTWFwQ2FsbG91dFN1YnZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGdldE5hdGl2ZUNvbXBvbmVudDtcbiAgICBnZXRNYXBNYW5hZ2VyQ29tbWFuZDtcbiAgICBnZXRVSU1hbmFnZXJDb21tYW5kO1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgQUlSTWFwQ2FsbG91dFN1YnZpZXcgPSB0aGlzLmdldE5hdGl2ZUNvbXBvbmVudCgpO1xuICAgICAgICByZXR1cm4gKDxBSVJNYXBDYWxsb3V0U3VidmlldyB7Li4udGhpcy5wcm9wc30gc3R5bGU9e1tzdHlsZXMuY2FsbG91dFN1YnZpZXcsIHRoaXMucHJvcHMuc3R5bGVdfS8+KTtcbiAgICB9XG59XG5leHBvcnRzLk1hcENhbGxvdXRTdWJ2aWV3ID0gTWFwQ2FsbG91dFN1YnZpZXc7XG5jb25zdCBzdHlsZXMgPSByZWFjdF9uYXRpdmVfMS5TdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgY2FsbG91dFN1YnZpZXc6IHt9LFxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgZGVjb3JhdGVNYXBDb21wb25lbnRfMS5kZWZhdWx0KShNYXBDYWxsb3V0U3VidmlldywgJ0NhbGxvdXRTdWJ2aWV3Jywge1xuICAgIGdvb2dsZToge1xuICAgICAgICBpb3M6IGRlY29yYXRlTWFwQ29tcG9uZW50XzEuU1VQUE9SVEVELFxuICAgICAgICBhbmRyb2lkOiBkZWNvcmF0ZU1hcENvbXBvbmVudF8xLk5PVF9TVVBQT1JURUQsXG4gICAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsVUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUksMkJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLGdCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBTyxhQUFBQyxPQUFBLFFBQUFDLHlCQUFBLEdBQUFDLHlCQUFBLG9CQUFBQyxxQkFBQSxRQUFBQyxLQUFBLE9BQUFQLGdCQUFBLENBQUFRLE9BQUEsRUFBQUwsT0FBQSxHQUFBTSxNQUFBLE1BQUFMLHlCQUFBLFFBQUFNLFNBQUEsT0FBQVYsZ0JBQUEsQ0FBQVEsT0FBQSxRQUFBRyxXQUFBLEVBQUFGLE1BQUEsR0FBQUcsT0FBQSxDQUFBQyxTQUFBLENBQUFOLEtBQUEsRUFBQU8sU0FBQSxFQUFBSixTQUFBLFlBQUFELE1BQUEs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