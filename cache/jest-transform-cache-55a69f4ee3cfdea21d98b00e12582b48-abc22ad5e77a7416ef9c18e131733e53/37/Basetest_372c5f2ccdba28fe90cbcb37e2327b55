468dbccaeb3a802773437c96cef08647
_getJestObj().mock('react-redux', function () {
  return {
    useDispatch: jest.fn()
  };
});
_getJestObj().mock('react-native-geolocation-service', function () {
  return {
    getCurrentPosition: jest.fn(function (success, error, options) {
      var location = {
        coords: {
          latitude: 17.3920466,
          longitude: 78.4758037
        }
      };
      success(location);
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Base = _interopRequireDefault(require("../Base"));
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNativeGeolocationService = _interopRequireDefault(require("react-native-geolocation-service"));
var _reactRedux = require("react-redux");
require("@testing-library/jest-dom");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Locations List Screen/Base Component', function () {
  var mockDispatch = jest.fn();
  var useDispatchMock;
  beforeEach(function () {
    useDispatchMock = _reactRedux.useDispatch;
    useDispatchMock.mockReturnValue(mockDispatch);
  });
  it('renders the base component correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    var currentLabel = _reactNative.screen.getByTestId('list-current-label');
    expect(currentLabel.props.children).toBe('Current Location');
  });
  it('should have the right location', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
    expect(_reactNativeGeolocationService.default.getCurrentPosition).toHaveBeenCalled();
  });
  it('renders the current location time', (0, _asyncToGenerator2.default)(function* () {
    var currentLocation = {
      address: 'unnamed road',
      time: new Date(Date.now()).toLocaleString(),
      latitude: 42.123456,
      longitude: -71.123456
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render.getByTestId;
    var currentLocationTime = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-current-time');
    });
    expect(currentLocationTime.props.children).toBe(currentLocation.time);
  }));
  it('renders the current location address', (0, _asyncToGenerator2.default)(function* () {
    var currentLocation = {
      address: 'unnamed road, Ward 78 Gunfoundry, Hyderabad - 500001, Telangana, India',
      time: new Date(Date.now()).toLocaleString(),
      latitude: 42.123456,
      longitude: -71.123456
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render2.getByTestId;
    var currentLocationAddress = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-current-name');
    });
    expect(currentLocationAddress.props.children).toBe(currentLocation.address);
  }));
  it('renders the whole location item correctly', (0, _asyncToGenerator2.default)(function* () {
    var navigation = {
      navigate: jest.fn()
    };
    var currentLocation = {
      address: 'unnamed road, Ward 78 Gunfoundry, Hyderabad - 500001, Telangana, India',
      time: new Date(Date.now()).toLocaleString(),
      latitude: 42.123456,
      longitude: -71.123456
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {})),
      getByTestId = _render3.getByTestId;
    var currentLocationItem = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('list-current-item');
    });
    _reactNative.fireEvent.press(currentLocationItem);
    expect(navigation.navigate).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,