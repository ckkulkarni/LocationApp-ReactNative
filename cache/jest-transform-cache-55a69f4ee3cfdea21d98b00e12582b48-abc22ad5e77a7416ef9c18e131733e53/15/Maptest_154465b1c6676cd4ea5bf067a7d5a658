3dc929aa318e394f2e2002256cd55cef
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _Map = _interopRequireDefault(require("../Map"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _reactNativeMaps = _interopRequireDefault(require("react-native-maps"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
describe('Map component that renders a map view for selected location', function () {
  var routeParams = {
    params: {
      address: {
        latitude: 37.78825,
        longitude: -122.4324
      }
    }
  };
  var wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Map.default, {
    route: routeParams
  }));
  var mapView = wrapper.find(_reactNativeMaps.default);
  it('renders map component for the selected map component', function () {
    expect(wrapper.find(_reactNativeMaps.default)).toHaveLength(1);
  });
  it('ensure that the right provider is given', function () {
    expect(mapView.prop('provider')).toEqual('google');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9NYXAiLCJfZW56eW1lQWRhcHRlclJlYWN0IiwiZW56eW1lIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3ROYXRpdmVNYXBzIiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiY29uZmlndXJlIiwiYWRhcHRlciIsIkFkYXB0ZXIiLCJkZXNjcmliZSIsInJvdXRlUGFyYW1zIiwicGFyYW1zIiwiYWRkcmVzcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwid3JhcHBlciIsInNoYWxsb3ciLCJqc3giLCJyb3V0ZSIsIm1hcFZpZXciLCJmaW5kIiwiTWFwVmlldyIsIml0IiwiZXhwZWN0IiwidG9IYXZlTGVuZ3RoIiwicHJvcCIsInRvRXF1YWwiXSwic291cmNlcyI6WyJNYXAudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IE1hcCBmcm9tICcuLi9NYXAnO1xyXG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XHJcbmltcG9ydCB7c2hhbGxvd30gZnJvbSAnZW56eW1lJztcclxuaW1wb3J0ICogYXMgZW56eW1lIGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCBNYXBWaWV3IGZyb20gJ3JlYWN0LW5hdGl2ZS1tYXBzJztcclxuXHJcbmVuenltZS5jb25maWd1cmUoe2FkYXB0ZXI6IG5ldyBBZGFwdGVyKCl9KTtcclxuZGVzY3JpYmUoJ01hcCBjb21wb25lbnQgdGhhdCByZW5kZXJzIGEgbWFwIHZpZXcgZm9yIHNlbGVjdGVkIGxvY2F0aW9uJywgKCkgPT4ge1xyXG4gIGNvbnN0IHJvdXRlUGFyYW1zID0ge1xyXG4gICAgcGFyYW1zOiB7XHJcbiAgICAgIGFkZHJlc3M6IHtcclxuICAgICAgICBsYXRpdHVkZTogMzcuNzg4MjUsXHJcbiAgICAgICAgbG9uZ2l0dWRlOiAtMTIyLjQzMjQsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH07XHJcbiAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPE1hcCByb3V0ZT17cm91dGVQYXJhbXN9IC8+KTtcclxuICBjb25zdCBtYXBWaWV3ID0gd3JhcHBlci5maW5kKE1hcFZpZXcpO1xyXG4gIGl0KCdyZW5kZXJzIG1hcCBjb21wb25lbnQgZm9yIHRoZSBzZWxlY3RlZCBtYXAgY29tcG9uZW50JywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChNYXBWaWV3KSkudG9IYXZlTGVuZ3RoKDEpO1xyXG4gIH0pO1xyXG4gIGl0KCdlbnN1cmUgdGhhdCB0aGUgcmlnaHQgcHJvdmlkZXIgaXMgZ2l2ZW4nLCAoKSA9PiB7XHJcbiAgICBleHBlY3QobWFwVmlldy5wcm9wKCdwcm92aWRlcicpKS50b0VxdWFsKCdnb29nbGUnKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLElBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFDLHVCQUFBLENBQUFKLE9BQUE7QUFFQSxJQUFBSyxnQkFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FB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