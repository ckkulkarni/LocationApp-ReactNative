81372bee3aae3dc01314e6c4b5ac4f1b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Base;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGeolocationService = _interopRequireDefault(require("react-native-geolocation-service"));
var _reactRedux = require("react-redux");
var _action = require("./reducers/action");
var _native = require("@react-navigation/native");
var _index = require("./reducers/index");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Base() {
  var dispatch = (0, _reactRedux.useDispatch)();
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    currentLocation = _useState2[0],
    setCurrentLocation = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    previousLocations = _useState4[0],
    setPreviousLocations = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    locationsList = _useState6[0],
    setLocationsList = _useState6[1];
  var timestamp = new Date(Date.now()).toLocaleString([], {
    year: 'numeric',
    month: 'numeric',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
  var navigation = (0, _native.useNavigation)();
  var getLocation = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (latitude, longitude) {
      var url = "https://api.opencagedata.com/geocode/v1/json?q=" + latitude + "+" + longitude + "&key=1b2f48e99d8a47c0aa3cbf25072a699b";
      try {
        var resultSet = yield fetch(url);
        var json = yield resultSet.json();
        if (json.results && json.results.length > 0) {
          return json.results[0].formatted;
        } else {
          console.error('No results found');
        }
      } catch (error) {
        console.error(error);
      }
    });
    return function getLocation(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  var requestLocationPermission = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        if (_reactNative.Platform.OS === 'android') {
          var granted = yield _reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION, {
            title: 'Location Permission',
            message: 'This application needs the device location',
            buttonPositive: 'ok',
            buttonNegative: 'Denied',
            buttonNeutral: 'Ask me later'
          });
          if (granted !== _reactNative.PermissionsAndroid.RESULTS.GRANTED) {
            _reactNative.Alert.alert('Permission Denied');
            return;
          }
        }
      } catch (err) {
        console.warn(err);
      }
    });
    return function requestLocationPermission() {
      return _ref2.apply(this, arguments);
    };
  }();
  var fetchLocation = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      _reactNativeGeolocationService.default.getCurrentPosition(function () {
        var _ref4 = (0, _asyncToGenerator2.default)(function* (position) {
          var _position$coords = position.coords,
            latitude = _position$coords.latitude,
            longitude = _position$coords.longitude;
          var address = yield getLocation(latitude, longitude);
          var newLocation = {
            address: address,
            time: timestamp,
            latitude: latitude,
            longitude: longitude
          };
          dispatch((0, _action.addLocation)(newLocation));
          setLocationsList(function (prevLocations) {
            var updatedLocations = [newLocation].concat((0, _toConsumableArray2.default)(prevLocations));
            if (updatedLocations.length > 30) {
              updatedLocations.splice(30, updatedLocations.length - 30);
            }
            return updatedLocations;
          });
          try {
            yield fetch("https://httpstat.us/200", {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                location_name: newLocation.address,
                time: Date.now()
              })
            });
          } catch (error) {
            console.error(error);
          }
        });
        return function (_x3) {
          return _ref4.apply(this, arguments);
        };
      }(), function (error) {
        console.log(error.code, error.message);
      }, {
        enableHighAccuracy: true,
        maximumAge: 10000,
        timeout: 15000
      });
    });
    return function fetchLocation() {
      return _ref3.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    requestLocationPermission();
    fetchLocation();
    dispatch((0, _index.initializeLocations)(locationsList));
    var interval = setInterval(function () {
      fetchLocation();
    }, 300000);
    return function () {
      return clearInterval(interval);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (locationsList.length > 0) {
      setCurrentLocation(locationsList[0]);
      setPreviousLocations(locationsList.slice(1));
    }
  }, [locationsList]);
  var clearAllLocations = function clearAllLocations() {
    setPreviousLocations([]);
  };
  var clearLocation = function clearLocation(index) {
    var newLocations = (0, _toConsumableArray2.default)(previousLocations);
    newLocations.splice(index, 1);
    setPreviousLocations(newLocations);
  };
  var handleLocationNavigation = function handleLocationNavigation(currentLocation) {
    console.log('Pressed');
    navigation.navigate('Map', {
      address: currentLocation
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.textHeaders,
      testID: "list-current-label",
      children: "Current Location"
    }), currentLocation && (0, _jsxRuntime.jsx)(_reactNative.View, {
      children: (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        testID: "list-current-item",
        onPress: function onPress() {
          return handleLocationNavigation(currentLocation);
        },
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            color: 'black',
            fontSize: 16
          },
          testID: "list-current-name",
          children: currentLocation.address
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          testID: "list-current-time",
          children: currentLocation.time
        })]
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
      title: "Clear All Locations",
      onPress: clearAllLocations,
      testID: "list-clear-all-button"
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.textHeaders,
      children: "Previous Locations"
    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      children: previousLocations.map(function (location, index) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.locationItem,
          children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              return handleLocationNavigation(currentLocation);
            },
            children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.locationText,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: {
                  color: 'black',
                  fontSize: 16
                },
                testID: "list-previous-name-" + index,
                children: location.address
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                testID: "list-previous-time-" + index,
                children: location.time
              })]
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
            testID: "list-previous-remove-" + index,
            onPress: function onPress() {
              return clearLocation(index);
            },
            style: styles.pressableStyles,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: {
                color: 'black'
              },
              children: "Remove"
            })
          })]
        }, index);
      })
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    top: 0,
    padding: 16,
    backgroundColor: 'white'
  },
  textHeaders: {
    fontSize: 20,
    fontWeight: 'bold',
    marginTop: 16
  },
  locationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginVertical: 8,
    width: 330,
    left: 0,
    marginHorizontal: 10
  },
  locationText: {
    flex: 1,
    marginRight: 8
  },
  pressableStyles: {
    backgroundColor: '#F3F3F3',
    borderRadius: 4,
    paddingHorizontal: 8,
    paddingVertical: 4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,