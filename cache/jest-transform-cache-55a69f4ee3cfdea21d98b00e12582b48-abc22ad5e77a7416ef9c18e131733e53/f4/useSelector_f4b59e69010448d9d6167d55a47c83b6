36d28acbef2472f2594f0bacad0a2e94
"use strict";

exports.__esModule = true;
exports.createSelectorHook = createSelectorHook;
exports.useSelector = exports.initializeUseSelector = void 0;
var _react = require("react");
var _useReduxContext = require("./useReduxContext");
var _Context = require("../components/Context");
var _useSyncExternalStore = require("../utils/useSyncExternalStore");
var useSyncExternalStoreWithSelector = _useSyncExternalStore.notInitialized;
var initializeUseSelector = function initializeUseSelector(fn) {
  useSyncExternalStoreWithSelector = fn;
};
exports.initializeUseSelector = initializeUseSelector;
var refEquality = function refEquality(a, b) {
  return a === b;
};
function createSelectorHook() {
  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Context.ReactReduxContext;
  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext.useReduxContext : function () {
    return (0, _react.useContext)(context);
  };
  return function useSelector(selector) {
    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;
    if (process.env.NODE_ENV !== 'production') {
      if (!selector) {
        throw new Error("You must pass a selector to useSelector");
      }
      if (typeof selector !== 'function') {
        throw new Error("You must pass a function as a selector to useSelector");
      }
      if (typeof equalityFn !== 'function') {
        throw new Error("You must pass a function as an equality function to useSelector");
      }
    }
    var _useReduxContext2 = useReduxContext(),
      store = _useReduxContext2.store,
      subscription = _useReduxContext2.subscription,
      getServerState = _useReduxContext2.getServerState;
    var selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, selector, equalityFn);
    (0, _react.useDebugValue)(selectedState);
    return selectedState;
  };
}
var useSelector = createSelectorHook();
exports.useSelector = useSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImNyZWF0ZVNlbGVjdG9ySG9vayIsInVzZVNlbGVjdG9yIiwiaW5pdGlhbGl6ZVVzZVNlbGVjdG9yIiwiX3JlYWN0IiwicmVxdWlyZSIsIl91c2VSZWR1eENvbnRleHQiLCJfQ29udGV4dCIsIl91c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIiwibm90SW5pdGlhbGl6ZWQiLCJmbiIsInJlZkVxdWFsaXR5IiwiYSIsImIiLCJjb250ZXh0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiUmVhY3RSZWR1eENvbnRleHQiLCJ1c2VSZWR1eENvbnRleHQiLCJ1c2VDb250ZXh0Iiwic2VsZWN0b3IiLCJlcXVhbGl0eUZuIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiRXJyb3IiLCJfdXNlUmVkdXhDb250ZXh0MiIsInN0b3JlIiwic3Vic2NyaXB0aW9uIiwiZ2V0U2VydmVyU3RhdGUiLCJzZWxlY3RlZFN0YXRlIiwiYWRkTmVzdGVkU3ViIiwiZ2V0U3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIl0sInNvdXJjZXMiOlsidXNlU2VsZWN0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNyZWF0ZVNlbGVjdG9ySG9vayA9IGNyZWF0ZVNlbGVjdG9ySG9vaztcbmV4cG9ydHMudXNlU2VsZWN0b3IgPSBleHBvcnRzLmluaXRpYWxpemVVc2VTZWxlY3RvciA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF91c2VSZWR1eENvbnRleHQgPSByZXF1aXJlKFwiLi91c2VSZWR1eENvbnRleHRcIik7XG5cbnZhciBfQ29udGV4dCA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL0NvbnRleHRcIik7XG5cbnZhciBfdXNlU3luY0V4dGVybmFsU3RvcmUgPSByZXF1aXJlKFwiLi4vdXRpbHMvdXNlU3luY0V4dGVybmFsU3RvcmVcIik7XG5cbmxldCB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciA9IF91c2VTeW5jRXh0ZXJuYWxTdG9yZS5ub3RJbml0aWFsaXplZDtcblxuY29uc3QgaW5pdGlhbGl6ZVVzZVNlbGVjdG9yID0gZm4gPT4ge1xuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciA9IGZuO1xufTtcblxuZXhwb3J0cy5pbml0aWFsaXplVXNlU2VsZWN0b3IgPSBpbml0aWFsaXplVXNlU2VsZWN0b3I7XG5cbmNvbnN0IHJlZkVxdWFsaXR5ID0gKGEsIGIpID0+IGEgPT09IGI7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCA9IF9Db250ZXh0LlJlYWN0UmVkdXhDb250ZXh0KSB7XG4gIGNvbnN0IHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IF9Db250ZXh0LlJlYWN0UmVkdXhDb250ZXh0ID8gX3VzZVJlZHV4Q29udGV4dC51c2VSZWR1eENvbnRleHQgOiAoKSA9PiAoMCwgX3JlYWN0LnVzZUNvbnRleHQpKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVxdWFsaXR5Rm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYW4gZXF1YWxpdHkgZnVuY3Rpb24gdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbixcbiAgICAgIGdldFNlcnZlclN0YXRlXG4gICAgfSA9IHVzZVJlZHV4Q29udGV4dCgpO1xuICAgIGNvbnN0IHNlbGVjdGVkU3RhdGUgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcihzdWJzY3JpcHRpb24uYWRkTmVzdGVkU3ViLCBzdG9yZS5nZXRTdGF0ZSwgZ2V0U2VydmVyU3RhdGUgfHwgc3RvcmUuZ2V0U3RhdGUsIHNlbGVjdG9yLCBlcXVhbGl0eUZuKTtcbiAgICAoMCwgX3JlYWN0LnVzZURlYnVnVmFsdWUpKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5cbmNvbnN0IHVzZVNlbGVjdG9yID0gLyojX19QVVJFX18qL2NyZWF0ZVNlbGVjdG9ySG9vaygpO1xuZXhwb3J0cy51c2VTZWxlY3RvciA9IHVzZVNlbGVjdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsT0FBTyxDQUFDQyxVQUFVLEdBQUcsSUFBSTtBQUN6QkQsT0FBTyxDQUFDRSxr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